<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>叹为观止</title>
  <subtitle>追求卓越，成功自然来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.vichamp.com/"/>
  <updated>2017-07-25T03:23:57.870Z</updated>
  <id>http://blog.vichamp.com/</id>
  
  <author>
    <name>John Doe</name>
    <email>victorwoo@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PowerShell 技能连载 - 当 Add-Type 失败之后</title>
    <link href="http://blog.vichamp.com/2017/07/21/when-add-type-fails/"/>
    <id>http://blog.vichamp.com/2017/07/21/when-add-type-fails/</id>
    <published>2017-07-20T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.870Z</updated>
    
    <content type="html"><![CDATA[<p><code>Add-Type</code> 可以将外部 DLL 文件中的 .NET 程序集载入 PowerShell 中。这在大多数情况下工作量好，以下是一个调用示例（当然，需要 SharePoint DLL 可用）：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="built_in">Add-Type</span> -Path <span class="string">"C:\SharepointCSMO\Microsoft.SharePoint.Client.dll"</span></div></pre></td></tr></table></figure>
<p>但是对某些 DLL 文件，这个命令会执行失败，PowerShell 返回一个““Unable to load one or more of the requested types. Retrieve the LoaderExceptions property for more information.”异常。</p>
<p>如果发生这种情况，一种解决办法是使用过时的（但是仍然可用的）<code>LoadFrom()</code> 方法：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PS&gt; [Reflection.Assembly]::LoadFrom(<span class="string">"C:\SharepointCSMO\Microsoft.SharePoint.Client.dll"</span>)</div></pre></td></tr></table></figure>
<p>为什么 <code>Add-Type</code> 方法会失败？<code>Add-Type</code> 维护着一个定制的和程序集相关的版本号。所以如果您试图加载的文件版本比期望的低，<code>Add-Type</code> 会拒绝加载它。相比之下，<code>LoadFrom()</code> 不关心版本号，所以和旧版本兼容。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/when-add-type-fails" target="_blank" rel="external">When Add-Type Fails…</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - When Add-Type Fails…
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 理解 PowerShell 和文件系统</title>
    <link href="http://blog.vichamp.com/2017/07/20/understanding-powershell-and-system-paths/"/>
    <id>http://blog.vichamp.com/2017/07/20/understanding-powershell-and-system-paths/</id>
    <published>2017-07-19T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.868Z</updated>
    
    <content type="html"><![CDATA[<p>PowerShell 维护着它自己的位置：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="built_in">Get-Location</span></div><div class="line"></div><div class="line">Path</div><div class="line">----</div><div class="line">C:\Users\tobwe</div></pre></td></tr></table></figure>
<p>当前路径指向所有 cmdlet 使用的相对路径。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="built_in">Get-Location</span></div><div class="line"></div><div class="line">Path</div><div class="line">----</div><div class="line">C:\Users\tobwe</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">PS&gt; <span class="built_in">Resolve-Path</span> -Path .</div><div class="line"></div><div class="line">Path</div><div class="line">----</div><div class="line">C:\Users\tobwe</div></pre></td></tr></table></figure>
<p>还有另一个当前路径，是由 Windows 维护的，影响所有 .NET 方法。它可能 PowerShell 的当前路径不同：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">PS&gt; [Environment]::CurrentDirectory</div><div class="line">C:\test</div><div class="line"></div><div class="line">PS&gt; [System.IO.Path]::GetFullPath(<span class="string">'.'</span>)</div><div class="line">C:\test</div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<p>所以如果在脚本中使用跟文件系统有关的 .NET 方法，可能需要先同步两个路径。这行代码确保 .NET 使用和 PowerShell 相同的文件系统路径：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PS&gt; [Environment]::CurrentDirectory = <span class="variable">$ExecutionContext</span>.SessionState.Path.CurrentFileSystemLocation</div></pre></td></tr></table></figure>
<p>同步之后，cmdlet 和 .NET 方法在同一个路径上工作：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">PS&gt; [Environment]::CurrentDirectory = <span class="variable">$ExecutionContext</span>.SessionState.Path.CurrentFileSystemLocation</div><div class="line"></div><div class="line">PS&gt; [System.IO.Path]::GetFullPath(<span class="string">'.'</span>)</div><div class="line">C:\Users\tobwe</div><div class="line"></div><div class="line">PS&gt; <span class="built_in">Resolve-Path</span> <span class="string">'.'</span></div><div class="line"></div><div class="line">Path</div><div class="line">----</div><div class="line">C:\Users\tobwe</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/understanding-powershell-and-system-paths" target="_blank" rel="external">Understanding PowerShell and System Paths</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Understanding PowerShell and System Paths
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 查看 PowerShell 当前的文件系统路径</title>
    <link href="http://blog.vichamp.com/2017/07/19/finding-powershell-s-current-file-system-path/"/>
    <id>http://blog.vichamp.com/2017/07/19/finding-powershell-s-current-file-system-path/</id>
    <published>2017-07-18T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.863Z</updated>
    
    <content type="html"><![CDATA[<p>To find out the path your PowerShell is currently using, simply run Get-Location:<br>要查看 PowerShell 的当前路径，只要用 <code>Get-Location</code> 命令即可：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="built_in">Get-Location</span></div><div class="line"></div><div class="line">Path          </div><div class="line">----          </div><div class="line">C:\Users\tobwe</div></pre></td></tr></table></figure>
<p>然而，当前路径不一定指向一个文件系统位置。如果您将位置指向注册表，例如这样：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">PS&gt; cd hkcu:\ </div><div class="line"></div><div class="line">PS&gt; <span class="built_in">Get-Location</span></div><div class="line"></div><div class="line">Path  </div><div class="line">----  </div><div class="line">HKCU:\</div></pre></td></tr></table></figure>
<p>如果您想知道 PowerShell 当前使用的文件系统路径，而不管当前使用什么 provider，请使用以下代码：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="variable">$ExecutionContext</span>.SessionState.Path</div><div class="line"></div><div class="line">CurrentLocation CurrentFileSystemLocation</div><div class="line">--------------- -------------------------</div><div class="line">HKCU:\          C:\Users\tobwe           </div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">PS&gt; <span class="variable">$ExecutionContext</span>.SessionState.Path.CurrentFileSystemLocation</div><div class="line"></div><div class="line">Path          </div><div class="line">----          </div><div class="line">C:\Users\tobwe </div><div class="line"></div><div class="line"></div><div class="line">PS&gt; <span class="built_in">Get-Location</span> </div><div class="line"></div><div class="line">Path  </div><div class="line">----  </div><div class="line">HKCU:\</div></pre></td></tr></table></figure>
<p><code>CurrentFileSystemLocation</code> 总是返回文件系统的当前位置，这可能和 <code>Get-Location</code> 返回的不一样。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/finding-powershell-s-current-file-system-path" target="_blank" rel="external">Finding PowerShell’s Current File System Path</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Finding PowerShell’s Current File System Path
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 探讨 Windows PowerShell 和 PowerShell Core</title>
    <link href="http://blog.vichamp.com/2017/07/18/dealing-with-windows-powershell-and-powershell-core/"/>
    <id>http://blog.vichamp.com/2017/07/18/dealing-with-windows-powershell-and-powershell-core/</id>
    <published>2017-07-17T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.858Z</updated>
    
    <content type="html"><![CDATA[<p>PowerShell 当前有两个版本：随 Windows 发布、基于完整 .NET 框架的的 “Windows PowerShell”，以及基于 .NET Core、支持跨平台、能够运行在 Nano Server 等平台的 “PowerShell Core”。</p>
<p>面向某个具体 PowerShell 版本的脚本作者可以使用 <code>#requires</code> 语句来确保他们的脚本运行于指定的版本。</p>
<p>例如，要确保一个脚本运行于 PowerShell Core 中，请将这段代码放在脚本顶部：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#requires -PSEdition Core</span></div><div class="line"><span class="built_in">Get-Process</span></div></pre></td></tr></table></figure>
<p>请确保把这段代码保存到磁盘。<code>#requires</code> 只对脚本有效。</p>
<p>当您在 Windows 机器上的 “Windows PowerShell” 中运行这段脚本，将会报错：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">PS&gt; C:\Users\abc\requires  core.ps1</div><div class="line">The script <span class="string">'requires  core.ps1'</span> cannot be run because it contained a <span class="string">"#requires"</span> statement  <span class="keyword">for</span> PowerShell</div><div class="line">editions <span class="string">'Core'</span>. The  edition of PowerShell that is required by the script does not match the  currently</div><div class="line">running PowerShell  Desktop edition.</div><div class="line">    + CategoryInfo          : NotSpecified: (requires  core.ps1:String) [], ParentContainsErrorRecordException</div><div class="line">    + FullyQualifiedErrorId :  ScriptRequiresUnmatchedPSEdition</div><div class="line"></div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<p>类似地，甚至更重要的是，当您将 “Core” 替换为 “Desktop”，脚本将无法在受限的 “PowerShell Core” 版本中运行。如果您的脚本依赖于传统 Windows 系统中的某些特性，并且依赖于完整 .NET Framework，这种做法十分明智。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/dealing-with-windows-powershell-and-powershell-core" target="_blank" rel="external">Dealing with “Windows PowerShell” and “PowerShell Core”</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Dealing with “Windows PowerShell” and “PowerShell Core”
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - Windows PowerShell 和 PowerShell Core</title>
    <link href="http://blog.vichamp.com/2017/07/17/windows-powershell-and-powershell-core/"/>
    <id>http://blog.vichamp.com/2017/07/17/windows-powershell-and-powershell-core/</id>
    <published>2017-07-16T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.854Z</updated>
    
    <content type="html"><![CDATA[<p>最近关于 PowerShell 版本有一些混淆。在 GitHub 上有一个名为 “PowerShell 6” 的<a href="https://github.com/PowerShell/PowerShell" target="_blank" rel="external">开源倡议</a>。</p>
<p>这是否意味着开源的 PowerShell 6 是 PowerShell 5 的继任者，并且最终和 Windows 一起发布？</p>
<p>并不是的。现在只有两个不同的 PowerShell，所谓的 “PowerShell Editions”。</p>
<p>“Windows PowerShell” 就我们所知会持续存在，并且将会随着将来的 Windows 版本发布，对应完整版 .NET Framework。</p>
<p>开源的 PowerShell 6 本意是基于 “PowerShell Core” 工作，这是一个有限的 .NET 子集 (.NET Core)。它的目的是在一个最小化的环境，例如 Nano Server 中运行，并且能够支持 Linux 和 Apple 等不同的平台。</p>
<p>从 PowerShell 5.1 开始，您可以这样检查 “PowerShell Edition”：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="variable">$PSVersionTable</span>.PSEdition</div><div class="line">Desktop</div></pre></td></tr></table></figure>
<p>“Desktop” 表示您在完整的 .NET Framework 上运行 “Windows PowerShell”。”Core” 表示您在 .NET Core 上运行 “PowerShell Core”。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/windows-powershell-and-powershell-core" target="_blank" rel="external">Windows PowerShell and PowerShell Core</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Windows PowerShell and PowerShell Core
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 设置 Powershell 标题文本</title>
    <link href="http://blog.vichamp.com/2017/07/14/setting-powershell-title-text/"/>
    <id>http://blog.vichamp.com/2017/07/14/setting-powershell-title-text/</id>
    <published>2017-07-13T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.849Z</updated>
    
    <content type="html"><![CDATA[<p>您也许知道可以通过类似这样一行代码改变 PowerShell 宿主窗口的标题文本：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="variable">$host</span>.UI.RawUI.WindowTitle = <span class="string">"Hello  World!"</span></div></pre></td></tr></table></figure>
<p>如果把这段代码加入 prompt 函数，标题文本就可以每次变化。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> prompt</div><div class="line">&#123;</div><div class="line">    <span class="comment"># get current path</span></div><div class="line">    <span class="variable">$path</span> = <span class="built_in">Get-Location</span></div><div class="line"></div><div class="line">    <span class="comment"># get current time</span></div><div class="line">    <span class="variable">$date</span> = <span class="built_in">Get-Date</span> -Format <span class="string">'dddd, MMMM dd'</span></div><div class="line"></div><div class="line">    <span class="comment"># create title text</span></div><div class="line">    <span class="variable">$host</span>.UI.RawUI.WindowTitle = <span class="string">"&gt;&gt;<span class="variable">$path</span>&lt;&lt; [<span class="variable">$date</span>]"</span></div><div class="line"></div><div class="line">    <span class="comment"># output prompt</span></div><div class="line">    <span class="string">'PS&gt; '</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PowerShell 每次完成一条命令之后，都会执行 “<code>prompt</code>“ 函数。在标题栏中，您将始终能看到当前的路径和日期，而 PowerShell 编辑器中的命令提示符被简化成 “PS&gt; “。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/setting-powershell-title-text" target="_blank" rel="external">Setting PowerShell Title Text</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Setting PowerShell Title Text
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 清除所有用户变量</title>
    <link href="http://blog.vichamp.com/2017/07/13/clearing-all-user-variables/"/>
    <id>http://blog.vichamp.com/2017/07/13/clearing-all-user-variables/</id>
    <published>2017-07-12T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.844Z</updated>
    
    <content type="html"><![CDATA[<p>在前一个技能中我们演示了如何用类似这样的方法来查找内置的 PowerShell 变量：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ps</span> = [PowerShell]::Create()</div><div class="line"><span class="literal">$null</span> = <span class="variable">$ps</span>.AddScript(<span class="string">'$null=$host;Get-Variable'</span>)</div><div class="line"><span class="variable">$ps</span>.Invoke()</div><div class="line"><span class="variable">$ps</span>.Runspace.Close()</div><div class="line"><span class="variable">$ps</span>.Dispose()</div></pre></td></tr></table></figure>
<p>现在我们来做相反的事情，创建一个函数来查找仅由你创建的用户变量：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Get-UserVariable (<span class="variable">$Name</span> = <span class="string">'*'</span>)</div><div class="line">&#123;</div><div class="line">    <span class="comment"># these variables may exist in certain environments (like ISE, or after use of foreach)</span></div><div class="line">    <span class="variable">$special</span> = <span class="string">'ps'</span>,<span class="string">'psise'</span>,<span class="string">'psunsupportedconsoleapplications'</span>, <span class="string">'foreach'</span>, <span class="string">'profile'</span></div><div class="line"></div><div class="line">    <span class="variable">$ps</span> = [PowerShell]::Create()</div><div class="line">    <span class="literal">$null</span> = <span class="variable">$ps</span>.AddScript(<span class="string">'$null=$host;Get-Variable'</span>)</div><div class="line">    <span class="variable">$reserved</span> = <span class="variable">$ps</span>.Invoke() |</div><div class="line">    <span class="built_in">Select-Object</span> -ExpandProperty Name</div><div class="line">    <span class="variable">$ps</span>.Runspace.Close()</div><div class="line">    <span class="variable">$ps</span>.Dispose()</div><div class="line">    <span class="built_in">Get-Variable</span> -Scope Global |</div><div class="line">    <span class="built_in">Where-Object</span> Name <span class="nomarkup">-like</span> <span class="variable">$Name</span> |</div><div class="line">    <span class="built_in">Where-Object</span> &#123; <span class="variable">$reserved</span> <span class="nomarkup">-notcontains</span> <span class="variable">$_</span>.Name &#125; |</div><div class="line">    <span class="built_in">Where-Object</span> &#123; <span class="variable">$special</span> <span class="nomarkup">-notcontains</span> <span class="variable">$_</span>.Name &#125; |</div><div class="line">    <span class="built_in">Where-Object</span> Name</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在可以很容易查找所有由您（或您的脚本）创建并仍然停留在内存中的变量：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">PS&gt; Get-UserVariable</div><div class="line"></div><div class="line">Name                           Value</div><div class="line">----                           -----</div><div class="line">hash                           &#123;Extensions, Link, Options, GPOLink...&#125;</div><div class="line">prop                           lParam</div><div class="line">reserved                       &#123;$, ?, ^, args...&#125;</div><div class="line">result                         &#123;System.Management.Automation.PSVariable, System.Management.Automation.Ques...</div><div class="line">varCount                       <span class="number">43</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">PS&gt; Get-UserVariable -Name pr*</div><div class="line"></div><div class="line">Name                           Value</div><div class="line">----                           -----</div><div class="line">prop                           lParam</div></pre></td></tr></table></figure>
<p>如果要清理您的运行空间，您可以用一行代码清除所有变量：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">PS&gt; Get-UserVariable</div><div class="line"></div><div class="line">Name                           Value</div><div class="line">----                           -----</div><div class="line">hash                           &#123;Extensions, Link, Options, GPOLink...&#125;</div><div class="line">key                            HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\H...</div><div class="line">prop                           lParam</div><div class="line">reserved                       &#123;$, ?, ^, args...&#125;</div><div class="line">result                         &#123;System.Management.Automation.PSVariable, System.Management.Automation.Ques...</div><div class="line">varCount                       <span class="number">43</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">PS&gt; Get-UserVariable | <span class="built_in">Remove-Variable</span></div><div class="line"></div><div class="line">PS&gt; Get-UserVariable</div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/clearing-all-user-variables" target="_blank" rel="external">Clearing All User Variables</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Clearing All User Variables
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 查找 PowerShell 缺省变量（第三部分）</title>
    <link href="http://blog.vichamp.com/2017/07/12/finding-powershell-default-variables-part-3/"/>
    <id>http://blog.vichamp.com/2017/07/12/finding-powershell-default-variables-part-3/</id>
    <published>2017-07-11T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.839Z</updated>
    
    <content type="html"><![CDATA[<p>在前一个技能中我们演示了如何用类似如下的方法来查找内置的 PowerShell 变量：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ps</span> = [PowerShell]::Create()</div><div class="line"><span class="literal">$null</span> = <span class="variable">$ps</span>.AddScript(<span class="string">'$null=$host;Get-Variable'</span>)</div><div class="line"><span class="variable">$ps</span>.Invoke()</div><div class="line"><span class="variable">$ps</span>.Runspace.Close()</div><div class="line"><span class="variable">$ps</span>.Dispose()</div></pre></td></tr></table></figure>
<p>显然，这段代码还是漏了一些不是由 PowerShell 核心引擎创建的变量，而是由具体宿主加入的变量，例如 powershell.exe，或者 ISE。这些缺失的变量需要手工添加。幸好不是很多：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ps</span> = [PowerShell]::Create()</div><div class="line"><span class="literal">$null</span> = <span class="variable">$ps</span>.AddScript(<span class="string">'$null=$host;Get-Variable'</span>)</div><div class="line">[System.Collections.ArrayList]<span class="variable">$result</span> = <span class="variable">$ps</span>.Invoke() |</div><div class="line">    <span class="built_in">Select-Object</span> -ExpandProperty Name</div><div class="line"><span class="variable">$ps</span>.Runspace.Close()</div><div class="line"><span class="variable">$ps</span>.Dispose()</div><div class="line"></div><div class="line"><span class="comment"># add host-specific variables</span></div><div class="line"><span class="variable">$special</span> = <span class="string">'ps'</span>,<span class="string">'psise'</span>,<span class="string">'psunsupportedconsoleapplications'</span>, <span class="string">'foreach'</span>, <span class="string">'profile'</span></div><div class="line"><span class="variable">$result</span>.AddRange(<span class="variable">$special</span>)</div></pre></td></tr></table></figure>
<p>现在这段代码能够获取包含所有保留 PowerShell 变量的列表，并且如果我们还缺少了某些变量，只需要将它们添加到 <code>$special</code> 列表即可。</p>
<p>顺便说一下，这段代码完美地演示了如何用 <code>[System.Collections.ArrayList]</code> 来创建一个更好的数组。跟常规的 <code>[Object[]]</code> 数组相比，<code>ArrayList</code> 对象拥有例如 <code>AddRange()</code>，能快速批量加入多个元素，等其它方法。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/finding-powershell-default-variables-part-3" target="_blank" rel="external">Finding PowerShell Default Variables (Part 3)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Finding PowerShell Default Variables (Part 3)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 查找 PowerShell 缺省变量（第二部分）</title>
    <link href="http://blog.vichamp.com/2017/07/11/finding-powershell-default-variables-part-2/"/>
    <id>http://blog.vichamp.com/2017/07/11/finding-powershell-default-variables-part-2/</id>
    <published>2017-07-10T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.834Z</updated>
    
    <content type="html"><![CDATA[<p>在前一个技能里我们解释了如何使用独立全新的 PowerShell 实例来获取所有缺省变量。当您仔细查看这些变量，会发现还是丢失了某些变量。</p>
<p>以下是一个稍微修改过的版本，名为 <code>Get-BuiltInPSVariable</code>，能返回所有保留的 PowerShell 变量：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Get-BuiltInPSVariable(<span class="variable">$Name</span>=<span class="string">'*'</span>)</div><div class="line">&#123;</div><div class="line">  <span class="comment"># create a new PowerShell</span></div><div class="line">  <span class="variable">$ps</span> = [PowerShell]::Create()</div><div class="line">  <span class="comment"># get all variables inside of it</span></div><div class="line">  <span class="literal">$null</span> = <span class="variable">$ps</span>.AddScript(<span class="string">'$null=$host;Get-Variable'</span>) </div><div class="line">  <span class="variable">$ps</span>.Invoke() |</div><div class="line">    <span class="built_in">Where-Object</span> Name <span class="nomarkup">-like</span> <span class="variable">$Name</span></div><div class="line">  <span class="comment"># dispose new PowerShell</span></div><div class="line">  <span class="variable">$ps</span>.Runspace.Close()</div><div class="line">  <span class="variable">$ps</span>.Dispose()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了不遗漏任何一个内置的 PowerShell 变量，这个做法使用了 <code>AddScript()</code> 方法来代替 <code>AddCommand()</code>，来执行多于一条命令。有一些 PowerShell 变量要等待至少一条命令执行之后才创建。</p>
<p>您现在可以获取所有的 PowerShell 内置变量，或搜索指定的变量：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">PS&gt; Get-BuiltInPSVariable -Name *pref*</div><div class="line"></div><div class="line">Name                           Value                                                                         </div><div class="line">----                           -----                                                                         </div><div class="line">ConfirmPreference              High                                                                          </div><div class="line">DebugPreference                SilentlyContinue                                                              </div><div class="line">ErrorActionPreference          <span class="keyword">Continue</span>                                                                      </div><div class="line">InformationPreference          SilentlyContinue                                                              </div><div class="line">ProgressPreference             <span class="keyword">Continue</span>                                                                      </div><div class="line">VerbosePreference              SilentlyContinue                                                              </div><div class="line">WarningPreference              <span class="keyword">Continue</span>                                                                      </div><div class="line">WhatIfPreference               False</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/finding-powershell-default-variables-part-2" target="_blank" rel="external">Finding PowerShell Default Variables (Part 2)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Finding PowerShell Default Variables (Part 2)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 查找 PowerShell 缺省变量（第一部分）</title>
    <link href="http://blog.vichamp.com/2017/07/10/finding-powershell-default-variables-part-1/"/>
    <id>http://blog.vichamp.com/2017/07/10/finding-powershell-default-variables-part-1/</id>
    <published>2017-07-09T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.830Z</updated>
    
    <content type="html"><![CDATA[<p>有些时候识别出 PowerShell 管理的缺省变量十分有用，这样能帮您区分内置的变量和自定义的变量。<code>Get-Variable</code> 总是输出所有的变量。</p>
<p>以下是一个简单的技巧，使用一个独立、全新的 PowerShell 运行空间来确定内置的 PowerShell 变量：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># create a new PowerShell</span></div><div class="line"><span class="variable">$ps</span> = [PowerShell]::Create()</div><div class="line"><span class="comment"># get all variables inside of it</span></div><div class="line"><span class="literal">$null</span> = <span class="variable">$ps</span>.AddCommand(<span class="string">'Get-Variable'</span>)</div><div class="line"><span class="variable">$result</span> = <span class="variable">$ps</span>.Invoke()</div><div class="line"><span class="comment"># dispose new PowerShell</span></div><div class="line"><span class="variable">$ps</span>.Runspace.Close()</div><div class="line"><span class="variable">$ps</span>.Dispose()</div><div class="line"></div><div class="line"><span class="comment"># check results</span></div><div class="line"><span class="variable">$varCount</span> = <span class="variable">$result</span>.Count</div><div class="line"><span class="built_in">Write-Warning</span> <span class="string">"Found <span class="variable">$varCount</span> variables."</span></div><div class="line"><span class="variable">$result</span> | <span class="built_in">Out-GridView</span></div></pre></td></tr></table></figure>
<p>当您运行这段代码时，该代码输出找到的变量数量，以及这些变量。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/finding-powershell-default-variables-part-1" target="_blank" rel="external">Finding PowerShell Default Variables (Part 1)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Finding PowerShell Default Variables (Part 1)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 查找 PowerShell 类</title>
    <link href="http://blog.vichamp.com/2017/07/07/finding-powershell-classes/"/>
    <id>http://blog.vichamp.com/2017/07/07/finding-powershell-classes/</id>
    <published>2017-07-06T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.827Z</updated>
    
    <content type="html"><![CDATA[<p>从 PowerShell 5 开始，您可以定义 PowerShell 类。它们是动态定义的，并且存在于内存中。那么要如何知道这些类的名字？</p>
<p>我们首先定义一个简单的，没有任何内容的类：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class TestClass</div><div class="line">&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如何确认内存中确实存在一个名为 “TestClass” 的类？以下是一个名为 <code>Get-PSClass</code> 的工具函数：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Get-PSClass(<span class="variable">$Name</span> = <span class="string">'*'</span>)</div><div class="line">&#123;</div><div class="line">    [AppDomain]::CurrentDomain.GetAssemblies() | </div><div class="line">    <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.GetCustomAttributes(<span class="literal">$false</span>) | </div><div class="line">        <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span> -is [System.Management.Automation.DynamicClassImplementationAssemblyAttribute]&#125; &#125; | </div><div class="line">        <span class="built_in">ForEach-Object</span> &#123; <span class="variable">$_</span>.GetTypes() | </div><div class="line">        <span class="built_in">Where-Object</span> IsPublic |</div><div class="line">        <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.Name <span class="nomarkup">-like</span> <span class="variable">$Name</span> &#125; |</div><div class="line">        <span class="built_in">Select-Object</span> -ExpandProperty Name</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行这个函数后，它会返回当前内存中所有定义的 PowerShell 类（在我们的 PowerShell 例子中，在前几个技能实验中有好几个 PowerShell 类）：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PS&gt; Get-PSClass</div><div class="line">HelperStuff</div><div class="line">Employee</div><div class="line">TestClass</div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<p>您也可以显示地测试一个类名：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">PS&gt; Get-PSClass -Name TestClass</div><div class="line">TestClass</div><div class="line"></div><div class="line">PS&gt; (Get-PSClass -Name TestClass) <span class="nomarkup">-ne</span> <span class="literal">$null</span> </div><div class="line">True</div><div class="line"></div><div class="line">PS&gt; (Get-PSClass -Name TestClassNotExisting) <span class="nomarkup">-ne</span> <span class="literal">$null</span> </div><div class="line">False</div></pre></td></tr></table></figure>
<p>您也可以使用通配符。一下代码将返回所有以 “A” 至 “H” 字母开头的类：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PS&gt; Get-PSClass -Name <span class="string">'[A-H]*'</span></div><div class="line">HelperStuff</div><div class="line">Employee</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/finding-powershell-classes" target="_blank" rel="external">Finding PowerShell Classes</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Finding PowerShell Classes
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 使用 PowerShell 类（二）</title>
    <link href="http://blog.vichamp.com/2017/07/06/using-powershell-classes-2/"/>
    <id>http://blog.vichamp.com/2017/07/06/using-powershell-classes-2/</id>
    <published>2017-07-05T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.823Z</updated>
    
    <content type="html"><![CDATA[<p>从 PowerShell 5 开始，您可以定义 PowerShell 类。您可以使用类来创建新对象，并通过创建一个或多个构造函数，您可以方便地初始化新创建的对象。</p>
<p>让我们看看效果：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Employee</div><div class="line">&#123;</div><div class="line">    [int]<span class="variable">$Id</span></div><div class="line">    [string]<span class="variable">$Name</span></div><div class="line"></div><div class="line">    Employee([int]<span class="variable">$Id</span>, [string]<span class="variable">$Name</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="variable">$this</span>.Id = <span class="variable">$Id</span></div><div class="line">        <span class="variable">$this</span>.Name = <span class="variable">$Name</span></div><div class="line">    &#125;</div><div class="line">    Employee ([string]<span class="variable">$Name</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="variable">$this</span>.Id = -<span class="number">1</span></div><div class="line">        <span class="variable">$this</span>.Name = <span class="variable">$Name</span></div><div class="line">    &#125;</div><div class="line">    Employee ()</div><div class="line">    &#123;</div><div class="line">        <span class="variable">$this</span>.Id = -<span class="number">1</span></div><div class="line">        <span class="variable">$this</span>.Name = <span class="string">'Undefined'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码运行后，将创建一个包含三个构造函数的 “Employee” 新类。以下是如何使用新类的方法：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">PS&gt; [Employee]::new()</div><div class="line"></div><div class="line">Id Name</div><div class="line">-- ----</div><div class="line">-<span class="number">1</span> Undefined</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">PS&gt; [Employee]::new(<span class="string">'Tobias'</span>)</div><div class="line"></div><div class="line">Id Name</div><div class="line">-- ----</div><div class="line">-<span class="number">1</span> Tobias</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">PS&gt; [Employee]::new(<span class="number">999</span>, <span class="string">'Tobias'</span>)</div><div class="line"></div><div class="line">    Id Name</div><div class="line">    -- ----</div><div class="line"><span class="number">999</span> Tobias</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<p>每次调用都使用一个新的构造函数，并且该类根据需要创建相应的对象。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/using-powershell-classes-2" target="_blank" rel="external">Using PowerShell Classes 2</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Using PowerShell Classes 2
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 使用 PowerShell 类（一）</title>
    <link href="http://blog.vichamp.com/2017/07/05/using-powershell-classes/"/>
    <id>http://blog.vichamp.com/2017/07/05/using-powershell-classes/</id>
    <published>2017-07-04T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.818Z</updated>
    
    <content type="html"><![CDATA[<p>从 PowerShell 5 开始，您可以定义类。它们有许多应用场景。一个是为有用的工具函数创建一个库来更好地整理它们。要实现这个功能，这个类要定义一些 “static” 方法。以下是一个简单的例子：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class HelperStuff</div><div class="line">&#123;</div><div class="line">    <span class="comment"># get first character of string and throw exception</span></div><div class="line">    <span class="comment"># when string is empty or multi-line</span></div><div class="line">    static [char] GetFirstCharacter([string]<span class="variable">$Text</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="variable">$Text</span>.Length <span class="nomarkup">-eq</span> <span class="number">0</span>) &#123; <span class="keyword">throw</span> <span class="string">'String is empty'</span> &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="variable">$Text</span>.Contains(<span class="string">"`n"</span>)) &#123; <span class="keyword">throw</span> <span class="string">'String contains multiple lines'</span> &#125;</div><div class="line">        <span class="keyword">return</span> <span class="variable">$Text</span>[<span class="number">0</span>]</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment"># get file extension in lower case</span></div><div class="line">    static [string] GetFileExtension([string]<span class="variable">$Path</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> [Io.Path]::GetExtension(<span class="variable">$Path</span>).ToLower()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>“HelperStuff” 类定义了 “<code>GetFirstCharacter</code>“ 和 “<code>GetFileExtension</code>“ 两个静态方法。现在查找和使用这些工具函数非常方便：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">PS&gt; [HelperStuff]::GetFirstCharacter(<span class="string">'Tobias'</span>)</div><div class="line">T</div><div class="line"></div><div class="line">PS&gt; [HelperStuff]::GetFileExtension(<span class="string">'c:\TEST.TxT'</span>) </div><div class="line">.txt</div><div class="line"></div><div class="line">PS&gt; [HelperStuff]::GetFileExtension(<span class="variable">$profile</span>) </div><div class="line">.ps1</div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/using-powershell-classes" target="_blank" rel="external">Using PowerShell Classes</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Using PowerShell Classes
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 读取注册表键值（临时解决办法）</title>
    <link href="http://blog.vichamp.com/2017/07/04/reading-registry-values-workaround/"/>
    <id>http://blog.vichamp.com/2017/07/04/reading-registry-values-workaround/</id>
    <published>2017-07-03T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.814Z</updated>
    
    <content type="html"><![CDATA[<p>在前一个技能中我们演示了 <code>Get-ItemProperty</code> 无法读取数据错误的注册表键值：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="variable">$key</span> =  <span class="string">"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group  Policy\History\&#123;35378EAC-683F-11D2-A89A-00C04FBBCFA2&#125;\0"</span></div><div class="line"></div><div class="line"></div><div class="line">PS&gt;  <span class="built_in">Get-ItemProperty</span> -Path <span class="variable">$key</span></div><div class="line"><span class="built_in">Get-ItemProperty</span> :  Specified cast is not valid.</div><div class="line">At line:<span class="number">1</span> char:<span class="number">1</span></div><div class="line">+ <span class="built_in">Get-ItemProperty</span>  -Path <span class="variable">$key</span></div><div class="line">+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line">    + CategoryInfo          : NotSpecified: (:)  [Get-ItemProperty], InvalidCastException</div><div class="line">    + FullyQualifiedErrorId :  System.InvalidCastException,Microsoft.PowerShell.Commands.GetItemPropertyComma</div><div class="line">    nd</div><div class="line"></div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<p>有一个变通办法，您可以使用 <code>Get-Item</code> 代替，来存取注册表键，这将使用它的 .NET 成员来读取所有值：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$key</span> = <span class="string">"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\History\&#123;35378EAC-683F-11D2-A89A-00C04FBBCFA2&#125;\0"</span></div><div class="line"></div><div class="line"><span class="variable">$key</span> = <span class="built_in">Get-Item</span> -Path <span class="variable">$key</span></div><div class="line"></div><div class="line"><span class="variable">$hash</span> = @&#123;&#125;</div><div class="line"><span class="keyword">foreach</span> (<span class="variable">$prop</span> <span class="keyword">in</span> <span class="variable">$key</span>.Property)</div><div class="line">&#123;</div><div class="line">    <span class="variable">$hash</span>.<span class="variable">$prop</span> = <span class="variable">$key</span>.GetValue(<span class="variable">$prop</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$hash</span></div></pre></td></tr></table></figure>
<p>结果看起来如下：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Name                           Value</div><div class="line">----                           -----</div><div class="line">Extensions                     [&#123;<span class="number">35378</span>EAC-<span class="number">683</span>F-<span class="number">11</span>D2-A89A-<span class="number">00</span>C04FBBCFA2&#125;&#123;<span class="number">0</span>F6B957E-<span class="number">509</span>E-<span class="number">11</span>D1-A7CC-<span class="number">0000</span>F87571E3&#125;]</div><div class="line">Link                           Local</div><div class="line">Options                        <span class="number">0</span></div><div class="line">GPOLink                        <span class="number">1</span></div><div class="line">Version                        <span class="number">65537</span></div><div class="line">GPOName                        Guidelines of the local group</div><div class="line">lParam                         <span class="number">0</span></div><div class="line">DSPath                         LocalGPO</div><div class="line">FileSysPath                    C:\WINDOWS\System32\GroupPolicy\Machine</div><div class="line">DisplayName                    Guidelines of the local group</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/reading-registry-values-workaround" target="_blank" rel="external">Reading Registry Values (Workaround)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Reading Registry Values (Workaround)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 读取注册表键值失败</title>
    <link href="http://blog.vichamp.com/2017/07/03/reading-registry-values-fails/"/>
    <id>http://blog.vichamp.com/2017/07/03/reading-registry-values-fails/</id>
    <published>2017-07-02T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.809Z</updated>
    
    <content type="html"><![CDATA[<p>有些时候，读取注册表键值可能会失败，提示奇怪的错误信息：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="variable">$key</span> =  <span class="string">"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group  Policy\History\&#123;35378EAC-683F-11D2-A89A-00C04FBBCFA2&#125;\0"</span></div><div class="line"></div><div class="line"></div><div class="line">PS&gt;  <span class="built_in">Get-ItemProperty</span> -Path <span class="variable">$key</span></div><div class="line"><span class="built_in">Get-ItemProperty</span> :  Specified cast is not valid.</div><div class="line">At line:<span class="number">1</span> char:<span class="number">1</span></div><div class="line">+ <span class="built_in">Get-ItemProperty</span>  -Path <span class="variable">$key</span></div><div class="line">+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line">    + CategoryInfo          : NotSpecified: (:)  [Get-ItemProperty], InvalidCastException</div><div class="line">    + FullyQualifiedErrorId :  System.InvalidCastException,Microsoft.PowerShell.Commands.GetItemPropertyComma</div><div class="line">    nd</div><div class="line"></div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<p>当发生这种情况时，用 regedit.exe 检查注册表发现一个或多个键值已破坏。在我们的例子中，”lParam” 的值似乎在所有的 Windows 机器中都是错误的。Regedit.exe 报告“(invalid … value)”。</p>
<p>在这个例子中，<code>Get-ItemProperty</code> 指令并不会读出任何值。您无法也排除该值：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">PS&gt;  <span class="built_in">Get-ItemProperty</span> -Path <span class="variable">$key</span> -Include * -Exclude lParam</div><div class="line"><span class="built_in">Get-ItemProperty</span> :  Specified cast is not valid.</div><div class="line">At line:<span class="number">1</span> char:<span class="number">1</span></div><div class="line">+ <span class="built_in">Get-ItemProperty</span>  -Path <span class="variable">$key</span> -Include * -Exclude lParam</div><div class="line">+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line">    + CategoryInfo          : NotSpecified: (:)  [Get-ItemProperty], InvalidCastException</div><div class="line">    + FullyQualifiedErrorId :  System.InvalidCastException,Microsoft.PowerShell.Commands.GetItemPropertyCommand</div><div class="line"></div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<p>可以采取的措施是只读取合法的键值：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="built_in">Get-ItemProperty</span> -Path <span class="variable">$key</span> -Name DSPath</div><div class="line"></div><div class="line"></div><div class="line">DSPath       : LocalGPO</div><div class="line">PSPath       : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersi</div><div class="line">                on\Group Policy\History\&#123;<span class="number">35378</span>EAC-<span class="number">683</span>F-<span class="number">11</span>D2-A89A-<span class="number">00</span>C04FBBCFA2&#125;\<span class="number">0</span></div><div class="line">PSParentPath : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersi</div><div class="line">                on\Group Policy\History\&#123;<span class="number">35378</span>EAC-<span class="number">683</span>F-<span class="number">11</span>D2-A89A-<span class="number">00</span>C04FBBCFA2&#125;</div><div class="line">PSChildName  : <span class="number">0</span></div><div class="line">PSProvider   : Microsoft.PowerShell.Core\Registry</div><div class="line"></div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/reading-registry-values-fails" target="_blank" rel="external">Reading Registry Values Fails</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Reading Registry Values Fails
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 每日问候（带语音）</title>
    <link href="http://blog.vichamp.com/2017/06/30/greetings-of-the-day-with-voice/"/>
    <id>http://blog.vichamp.com/2017/06/30/greetings-of-the-day-with-voice/</id>
    <published>2017-06-29T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.805Z</updated>
    
    <content type="html"><![CDATA[<p>在前一个技能中我们解释了如何在 PowerShell 配置文件中增加个人问候。这个问候信息也可以朗读出来，假设音量打开的情况下。这对所有的 PowerShell 宿主都有效，包括 VSCode。</p>
<p>这将把代码增加到您的配置文件脚本中：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># create profile if it does not yet exist</span></div><div class="line"><span class="variable">$exists</span> = <span class="built_in">Test-Path</span> -Path <span class="variable">$Profile</span>.CurrentUserAllHosts</div><div class="line"><span class="keyword">if</span> (!<span class="variable">$exists</span>) </div><div class="line">&#123; </div><div class="line">    <span class="literal">$null</span> = <span class="built_in">New-Item</span> -Path <span class="variable">$Profile</span>.CurrentUserAllHosts -ItemType File -Force </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># add code to profile</span></div><div class="line"><span class="string">@'</span></div><div class="line">$greetings = </div><div class="line">'Hello there!',</div><div class="line">'Glad to see you!',</div><div class="line">'Happy coding!',</div><div class="line">'Have a great day!',</div><div class="line">'May the PowerShell be with you!'</div><div class="line"></div><div class="line">$text = $greetings | Get-Random</div><div class="line">$null = (New-Object -COM Sapi.SpVoice).Speak($text)</div><div class="line">'@ | <span class="built_in">Add-Content</span> -Path <span class="variable">$Profile</span>.CurrentUserAllHosts -Encoding Default</div></pre></td></tr></table></figure>
<p>要编辑用户配置文件，请运行这段代码：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PS&gt; notepad <span class="variable">$profile</span>.CurrentUserAllHosts</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/greetings-of-the-day-with-voice" target="_blank" rel="external">Greetings of the Day (with Voice)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Greetings of the Day (with Voice)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 每日问候</title>
    <link href="http://blog.vichamp.com/2017/06/29/greetings-of-the-day/"/>
    <id>http://blog.vichamp.com/2017/06/29/greetings-of-the-day/</id>
    <published>2017-06-28T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.800Z</updated>
    
    <content type="html"><![CDATA[<p>以下是一个在 PowerShell 中接受一个字符串数组并返回一个随机的字符串，可以用作自定义问候语的简单方法：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$greetings</span> = </div><div class="line"><span class="string">'Hello there!'</span>,</div><div class="line"><span class="string">'Glad to see you!'</span>,</div><div class="line"><span class="string">'Happy coding!'</span>,</div><div class="line"><span class="string">'Have a great day!'</span>,</div><div class="line"><span class="string">'May the PowerShell be with you!'</span></div><div class="line"></div><div class="line"><span class="variable">$greetings</span> | <span class="built_in">Get-Random</span></div></pre></td></tr></table></figure>
<p>您所需要做的只是将这段代码加到您的 profile 脚本，例如这样：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># create profile if it does not yet exist</span></div><div class="line"><span class="variable">$exists</span> = <span class="built_in">Test-Path</span> -Path <span class="variable">$Profile</span>.CurrentUserAllHosts</div><div class="line"><span class="keyword">if</span> (!<span class="variable">$exists</span>) </div><div class="line">&#123; </div><div class="line">    <span class="literal">$null</span> = <span class="built_in">New-Item</span> -Path <span class="variable">$Profile</span>.CurrentUserAllHosts -ItemType File -Force </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># add code to profile</span></div><div class="line"><span class="string">@'</span></div><div class="line">$greetings = </div><div class="line">'Hello there!',</div><div class="line">'Glad to see you!',</div><div class="line">'Happy coding!',</div><div class="line">'Have a great day!',</div><div class="line">'May the PowerShell be with you!'</div><div class="line"></div><div class="line">$greetings | Get-Random</div><div class="line">'@ | <span class="built_in">Add-Content</span> -Path <span class="variable">$Profile</span>.CurrentUserAllHosts -Encoding Default</div></pre></td></tr></table></figure>
<p>完成以后，PowerShell 将会使用自定义信息向您问候。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/greetings-of-the-day" target="_blank" rel="external">Greetings of the Day</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Greetings of the Day
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - PowerShell 中 LINQ 的真实情况</title>
    <link href="http://blog.vichamp.com/2017/06/28/truth-about-linq-in-powershell/"/>
    <id>http://blog.vichamp.com/2017/06/28/truth-about-linq-in-powershell/</id>
    <published>2017-06-27T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.794Z</updated>
    
    <content type="html"><![CDATA[<p>不久前有一些关于 LINQ，一个 .NET 查询语言，在 PowerShell 中用来提升代码速度的报告。</p>
<p>直到 PowerShell 真正支持 Linq 之前，使用 Linq 是非常冗长的，并且需要使用强类型和没有文档的方法。另外，同样的事可以使用纯 PowerShell 方法来做，速度的提升很少——至少对 IPPro 相关的任务不明显。</p>
<p>以下是一个使用很简单的 Linq 语句对数字求和的测试用例。它接受 Windows 文件夹下的所有文件，然后对所有文件的长度求和：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$numbers</span> = <span class="built_in">Get-ChildItem</span> -Path <span class="variable">$env:windir</span> -File | <span class="built_in">Select-Object</span> -ExpandProperty Length</div><div class="line"></div><div class="line">(<span class="built_in">Measure-Command</span> &#123;</div><div class="line">  <span class="variable">$sum1</span> = [Linq.Enumerable]::Sum([int[]]<span class="variable">$numbers</span>)</div><div class="line">&#125;).TotalMilliseconds</div><div class="line"></div><div class="line">(<span class="built_in">Measure-Command</span> &#123;</div><div class="line">  <span class="variable">$sum2</span> = (<span class="variable">$numbers</span> | <span class="built_in">Measure-Object</span> -Sum).Sum</div><div class="line">&#125;).TotalMilliseconds</div><div class="line"></div><div class="line">(<span class="built_in">Measure-Command</span> &#123;</div><div class="line">  <span class="variable">$sum3</span> = <span class="number">0</span></div><div class="line">  <span class="keyword">foreach</span> (<span class="variable">$number</span> <span class="keyword">in</span> <span class="variable">$numbers</span>) &#123; <span class="variable">$sum3</span>+=<span class="variable">$number</span> &#125;</div><div class="line">&#125;).TotalMilliseconds</div></pre></td></tr></table></figure>
<p>当您运行它多次的时候，您会观察到执行时间的输出。Linq 的方法可以使用，但是对数据类型十分敏感。例如，您需要将数字数组转换为 integer 数组，否则 Linq 的 <code>Sum()</code> 方法将不起作用。</p>
<p>可以提炼出两条法则：</p>
<ol>
<li><p>这时不值得使用 Linq，因为它尚未集成到 PowerShell 中，并且会产生难读的代码。它几乎相当于在 PowerShell 使用 C# 源代码。</p>
</li>
<li><p>如果您想提升速度，请在所有可能的地方避免使用管道。foreach 循环的执行速度比用管道将许多对象通过管道传到 <code>ForEach-Object</code> 快许多。</p>
</li>
</ol>
<p>If Linq was better integrated into PowerShell in the future, it would indeed be highly interesting.</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/truth-about-linq-in-powershell" target="_blank" rel="external">Truth about LINQ in PowerShell</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Truth about LINQ in PowerShell
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 神秘的 Windows 10 透明模式</title>
    <link href="http://blog.vichamp.com/2017/06/27/secret-windows-10-transparency-mode/"/>
    <id>http://blog.vichamp.com/2017/06/27/secret-windows-10-transparency-mode/</id>
    <published>2017-06-26T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.788Z</updated>
    
    <content type="html"><![CDATA[<p>When you open a native PowerShell console in Windows 10, you can hold down CTRL+SHIFT, then move your mouse wheel, to adjust console background color transparency, and let other windows shine through. The same works for cmd.exe as well, of course.<br>当您在 Windows 10 中打开一个原生的 PowerShell 控制台，按下 <code>CTRL</code> + <code>SHIFT</code> 键，然后滚动鼠标滚轮，就可以调节控制台背景色的透明度，并且让其它窗口的内容透射出来。当然这对 cmd.exe 也是有效的。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/secret-windows-10-transparency-mode" target="_blank" rel="external">Secret Windows 10 Transparency Mode</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Secret Windows 10 Transparency Mode
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 清空 DNS 缓存</title>
    <link href="http://blog.vichamp.com/2017/06/26/flush-dns-cache/"/>
    <id>http://blog.vichamp.com/2017/06/26/flush-dns-cache/</id>
    <published>2017-06-25T16:00:00.000Z</published>
    <updated>2017-07-25T03:23:57.783Z</updated>
    
    <content type="html"><![CDATA[<p>Windows 使用了 DNS 缓存技术，如果改变了 DNS 服务器，您需要刷新 DNS 缓存以使新的设置生效。PowerShell 对传统的控制台命令是有好的，所以只需要在 PowerShell 中运行这行代码：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PS&gt; ipconfig /flushdns</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/flush-dns-cache" target="_blank" rel="external">Flush DNS Cache</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Flush DNS Cache
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
</feed>
