<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>叹为观止</title>
  <subtitle>追求卓越，成功自然来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.vichamp.com/"/>
  <updated>2017-07-13T01:34:45.712Z</updated>
  <id>http://blog.vichamp.com/</id>
  
  <author>
    <name>John Doe</name>
    <email>victorwoo@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PowerShell 技能连载 - 查找 PowerShell 缺省变量（第二部分）</title>
    <link href="http://blog.vichamp.com/2017/07/11/finding-powershell-default-variables-part-2/"/>
    <id>http://blog.vichamp.com/2017/07/11/finding-powershell-default-variables-part-2/</id>
    <published>2017-07-10T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.712Z</updated>
    
    <content type="html"><![CDATA[<p>在前一个技能里我们解释了如何使用独立全新的 PowerShell 实例来获取所有缺省变量。当您仔细查看这些变量，会发现还是丢失了某些变量。</p>
<p>以下是一个稍微修改过的版本，名为 <code>Get-BuiltInPSVariable</code>，能返回所有保留的 PowerShell 变量：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Get-BuiltInPSVariable(<span class="variable">$Name</span>=<span class="string">'*'</span>)</div><div class="line">&#123;</div><div class="line">  <span class="comment"># create a new PowerShell</span></div><div class="line">  <span class="variable">$ps</span> = [PowerShell]::Create()</div><div class="line">  <span class="comment"># get all variables inside of it</span></div><div class="line">  <span class="literal">$null</span> = <span class="variable">$ps</span>.AddScript(<span class="string">'$null=$host;Get-Variable'</span>) </div><div class="line">  <span class="variable">$ps</span>.Invoke() |</div><div class="line">    <span class="built_in">Where-Object</span> Name <span class="nomarkup">-like</span> <span class="variable">$Name</span></div><div class="line">  <span class="comment"># dispose new PowerShell</span></div><div class="line">  <span class="variable">$ps</span>.Runspace.Close()</div><div class="line">  <span class="variable">$ps</span>.Dispose()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了不遗漏任何一个内置的 PowerShell 变量，这个做法使用了 <code>AddScript()</code> 方法来代替 <code>AddCommand()</code>，来执行多于一条命令。有一些 PowerShell 变量要等待至少一条命令执行之后才创建。</p>
<p>您现在可以获取所有的 PowerShell 内置变量，或搜索指定的变量：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">PS&gt; Get-BuiltInPSVariable -Name *pref*</div><div class="line"></div><div class="line">Name                           Value                                                                         </div><div class="line">----                           -----                                                                         </div><div class="line">ConfirmPreference              High                                                                          </div><div class="line">DebugPreference                SilentlyContinue                                                              </div><div class="line">ErrorActionPreference          <span class="keyword">Continue</span>                                                                      </div><div class="line">InformationPreference          SilentlyContinue                                                              </div><div class="line">ProgressPreference             <span class="keyword">Continue</span>                                                                      </div><div class="line">VerbosePreference              SilentlyContinue                                                              </div><div class="line">WarningPreference              <span class="keyword">Continue</span>                                                                      </div><div class="line">WhatIfPreference               False</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/finding-powershell-default-variables-part-2" target="_blank" rel="external">Finding PowerShell Default Variables (Part 2)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Finding PowerShell Default Variables (Part 2)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 查找 PowerShell 缺省变量（第一部分）</title>
    <link href="http://blog.vichamp.com/2017/07/10/finding-powershell-default-variables-part-1/"/>
    <id>http://blog.vichamp.com/2017/07/10/finding-powershell-default-variables-part-1/</id>
    <published>2017-07-09T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.703Z</updated>
    
    <content type="html"><![CDATA[<p>有些时候识别出 PowerShell 管理的缺省变量十分有用，这样能帮您区分内置的变量和自定义的变量。<code>Get-Variable</code> 总是输出所有的变量。</p>
<p>以下是一个简单的技巧，使用一个独立、全新的 PowerShell 运行空间来确定内置的 PowerShell 变量：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># create a new PowerShell</span></div><div class="line"><span class="variable">$ps</span> = [PowerShell]::Create()</div><div class="line"><span class="comment"># get all variables inside of it</span></div><div class="line"><span class="literal">$null</span> = <span class="variable">$ps</span>.AddCommand(<span class="string">'Get-Variable'</span>)</div><div class="line"><span class="variable">$result</span> = <span class="variable">$ps</span>.Invoke()</div><div class="line"><span class="comment"># dispose new PowerShell</span></div><div class="line"><span class="variable">$ps</span>.Runspace.Close()</div><div class="line"><span class="variable">$ps</span>.Dispose()</div><div class="line"></div><div class="line"><span class="comment"># check results</span></div><div class="line"><span class="variable">$varCount</span> = <span class="variable">$result</span>.Count</div><div class="line"><span class="built_in">Write-Warning</span> <span class="string">"Found <span class="variable">$varCount</span> variables."</span></div><div class="line"><span class="variable">$result</span> | <span class="built_in">Out-GridView</span></div></pre></td></tr></table></figure>
<p>当您运行这段代码时，该代码输出找到的变量数量，以及这些变量。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/finding-powershell-default-variables-part-1" target="_blank" rel="external">Finding PowerShell Default Variables (Part 1)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Finding PowerShell Default Variables (Part 1)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 查找 PowerShell 类</title>
    <link href="http://blog.vichamp.com/2017/07/07/finding-powershell-classes/"/>
    <id>http://blog.vichamp.com/2017/07/07/finding-powershell-classes/</id>
    <published>2017-07-06T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.697Z</updated>
    
    <content type="html"><![CDATA[<p>从 PowerShell 5 开始，您可以定义 PowerShell 类。它们是动态定义的，并且存在于内存中。那么要如何知道这些类的名字？</p>
<p>我们首先定义一个简单的，没有任何内容的类：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class TestClass</div><div class="line">&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如何确认内存中确实存在一个名为 “TestClass” 的类？以下是一个名为 <code>Get-PSClass</code> 的工具函数：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Get-PSClass(<span class="variable">$Name</span> = <span class="string">'*'</span>)</div><div class="line">&#123;</div><div class="line">    [AppDomain]::CurrentDomain.GetAssemblies() | </div><div class="line">    <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.GetCustomAttributes(<span class="literal">$false</span>) | </div><div class="line">        <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span> -is [System.Management.Automation.DynamicClassImplementationAssemblyAttribute]&#125; &#125; | </div><div class="line">        <span class="built_in">ForEach-Object</span> &#123; <span class="variable">$_</span>.GetTypes() | </div><div class="line">        <span class="built_in">Where-Object</span> IsPublic |</div><div class="line">        <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.Name <span class="nomarkup">-like</span> <span class="variable">$Name</span> &#125; |</div><div class="line">        <span class="built_in">Select-Object</span> -ExpandProperty Name</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行这个函数后，它会返回当前内存中所有定义的 PowerShell 类（在我们的 PowerShell 例子中，在前几个技能实验中有好几个 PowerShell 类）：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PS&gt; Get-PSClass</div><div class="line">HelperStuff</div><div class="line">Employee</div><div class="line">TestClass</div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<p>您也可以显示地测试一个类名：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">PS&gt; Get-PSClass -Name TestClass</div><div class="line">TestClass</div><div class="line"></div><div class="line">PS&gt; (Get-PSClass -Name TestClass) <span class="nomarkup">-ne</span> <span class="literal">$null</span> </div><div class="line">True</div><div class="line"></div><div class="line">PS&gt; (Get-PSClass -Name TestClassNotExisting) <span class="nomarkup">-ne</span> <span class="literal">$null</span> </div><div class="line">False</div></pre></td></tr></table></figure>
<p>您也可以使用通配符。一下代码将返回所有以 “A” 至 “H” 字母开头的类：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PS&gt; Get-PSClass -Name <span class="string">'[A-H]*'</span></div><div class="line">HelperStuff</div><div class="line">Employee</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/finding-powershell-classes" target="_blank" rel="external">Finding PowerShell Classes</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Finding PowerShell Classes
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 使用 PowerShell 类（二）</title>
    <link href="http://blog.vichamp.com/2017/07/06/using-powershell-classes-2/"/>
    <id>http://blog.vichamp.com/2017/07/06/using-powershell-classes-2/</id>
    <published>2017-07-05T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.690Z</updated>
    
    <content type="html"><![CDATA[<p>从 PowerShell 5 开始，您可以定义 PowerShell 类。您可以使用类来创建新对象，并通过创建一个或多个构造函数，您可以方便地初始化新创建的对象。</p>
<p>让我们看看效果：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Employee</div><div class="line">&#123;</div><div class="line">    [int]<span class="variable">$Id</span></div><div class="line">    [string]<span class="variable">$Name</span></div><div class="line"></div><div class="line">    Employee([int]<span class="variable">$Id</span>, [string]<span class="variable">$Name</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="variable">$this</span>.Id = <span class="variable">$Id</span></div><div class="line">        <span class="variable">$this</span>.Name = <span class="variable">$Name</span></div><div class="line">    &#125;</div><div class="line">    Employee ([string]<span class="variable">$Name</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="variable">$this</span>.Id = -<span class="number">1</span></div><div class="line">        <span class="variable">$this</span>.Name = <span class="variable">$Name</span></div><div class="line">    &#125;</div><div class="line">    Employee ()</div><div class="line">    &#123;</div><div class="line">        <span class="variable">$this</span>.Id = -<span class="number">1</span></div><div class="line">        <span class="variable">$this</span>.Name = <span class="string">'Undefined'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码运行后，将创建一个包含三个构造函数的 “Employee” 新类。以下是如何使用新类的方法：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">PS&gt; [Employee]::new()</div><div class="line"></div><div class="line">Id Name</div><div class="line">-- ----</div><div class="line">-<span class="number">1</span> Undefined</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">PS&gt; [Employee]::new(<span class="string">'Tobias'</span>)</div><div class="line"></div><div class="line">Id Name</div><div class="line">-- ----</div><div class="line">-<span class="number">1</span> Tobias</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">PS&gt; [Employee]::new(<span class="number">999</span>, <span class="string">'Tobias'</span>)</div><div class="line"></div><div class="line">    Id Name</div><div class="line">    -- ----</div><div class="line"><span class="number">999</span> Tobias</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<p>每次调用都使用一个新的构造函数，并且该类根据需要创建相应的对象。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/using-powershell-classes-2" target="_blank" rel="external">Using PowerShell Classes 2</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Using PowerShell Classes 2
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 使用 PowerShell 类（一）</title>
    <link href="http://blog.vichamp.com/2017/07/05/using-powershell-classes/"/>
    <id>http://blog.vichamp.com/2017/07/05/using-powershell-classes/</id>
    <published>2017-07-04T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.683Z</updated>
    
    <content type="html"><![CDATA[<p>从 PowerShell 5 开始，您可以定义类。它们有许多应用场景。一个是为有用的工具函数创建一个库来更好地整理它们。要实现这个功能，这个类要定义一些 “static” 方法。以下是一个简单的例子：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class HelperStuff</div><div class="line">&#123;</div><div class="line">    <span class="comment"># get first character of string and throw exception</span></div><div class="line">    <span class="comment"># when string is empty or multi-line</span></div><div class="line">    static [char] GetFirstCharacter([string]<span class="variable">$Text</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="variable">$Text</span>.Length <span class="nomarkup">-eq</span> <span class="number">0</span>) &#123; <span class="keyword">throw</span> <span class="string">'String is empty'</span> &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="variable">$Text</span>.Contains(<span class="string">"`n"</span>)) &#123; <span class="keyword">throw</span> <span class="string">'String contains multiple lines'</span> &#125;</div><div class="line">        <span class="keyword">return</span> <span class="variable">$Text</span>[<span class="number">0</span>]</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment"># get file extension in lower case</span></div><div class="line">    static [string] GetFileExtension([string]<span class="variable">$Path</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> [Io.Path]::GetExtension(<span class="variable">$Path</span>).ToLower()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>“HelperStuff” 类定义了 “<code>GetFirstCharacter</code>“ 和 “<code>GetFileExtension</code>“ 两个静态方法。现在查找和使用这些工具函数非常方便：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">PS&gt; [HelperStuff]::GetFirstCharacter(<span class="string">'Tobias'</span>)</div><div class="line">T</div><div class="line"></div><div class="line">PS&gt; [HelperStuff]::GetFileExtension(<span class="string">'c:\TEST.TxT'</span>) </div><div class="line">.txt</div><div class="line"></div><div class="line">PS&gt; [HelperStuff]::GetFileExtension(<span class="variable">$profile</span>) </div><div class="line">.ps1</div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/using-powershell-classes" target="_blank" rel="external">Using PowerShell Classes</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Using PowerShell Classes
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 读取注册表键值（临时解决办法）</title>
    <link href="http://blog.vichamp.com/2017/07/04/reading-registry-values-workaround/"/>
    <id>http://blog.vichamp.com/2017/07/04/reading-registry-values-workaround/</id>
    <published>2017-07-03T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.677Z</updated>
    
    <content type="html"><![CDATA[<p>在前一个技能中我们演示了 <code>Get-ItemProperty</code> 无法读取数据错误的注册表键值：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="variable">$key</span> =  <span class="string">"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group  Policy\History\&#123;35378EAC-683F-11D2-A89A-00C04FBBCFA2&#125;\0"</span></div><div class="line"></div><div class="line"></div><div class="line">PS&gt;  <span class="built_in">Get-ItemProperty</span> -Path <span class="variable">$key</span></div><div class="line"><span class="built_in">Get-ItemProperty</span> :  Specified cast is not valid.</div><div class="line">At line:<span class="number">1</span> char:<span class="number">1</span></div><div class="line">+ <span class="built_in">Get-ItemProperty</span>  -Path <span class="variable">$key</span></div><div class="line">+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line">    + CategoryInfo          : NotSpecified: (:)  [Get-ItemProperty], InvalidCastException</div><div class="line">    + FullyQualifiedErrorId :  System.InvalidCastException,Microsoft.PowerShell.Commands.GetItemPropertyComma</div><div class="line">    nd</div><div class="line"></div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<p>有一个变通办法，您可以使用 <code>Get-Item</code> 代替，来存取注册表键，这将使用它的 .NET 成员来读取所有值：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$key</span> = <span class="string">"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\History\&#123;35378EAC-683F-11D2-A89A-00C04FBBCFA2&#125;\0"</span></div><div class="line"></div><div class="line"><span class="variable">$key</span> = <span class="built_in">Get-Item</span> -Path <span class="variable">$key</span></div><div class="line"></div><div class="line"><span class="variable">$hash</span> = @&#123;&#125;</div><div class="line"><span class="keyword">foreach</span> (<span class="variable">$prop</span> <span class="keyword">in</span> <span class="variable">$key</span>.Property)</div><div class="line">&#123;</div><div class="line">    <span class="variable">$hash</span>.<span class="variable">$prop</span> = <span class="variable">$key</span>.GetValue(<span class="variable">$prop</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$hash</span></div></pre></td></tr></table></figure>
<p>结果看起来如下：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Name                           Value</div><div class="line">----                           -----</div><div class="line">Extensions                     [&#123;<span class="number">35378</span>EAC-<span class="number">683</span>F-<span class="number">11</span>D2-A89A-<span class="number">00</span>C04FBBCFA2&#125;&#123;<span class="number">0</span>F6B957E-<span class="number">509</span>E-<span class="number">11</span>D1-A7CC-<span class="number">0000</span>F87571E3&#125;]</div><div class="line">Link                           Local</div><div class="line">Options                        <span class="number">0</span></div><div class="line">GPOLink                        <span class="number">1</span></div><div class="line">Version                        <span class="number">65537</span></div><div class="line">GPOName                        Guidelines of the local group</div><div class="line">lParam                         <span class="number">0</span></div><div class="line">DSPath                         LocalGPO</div><div class="line">FileSysPath                    C:\WINDOWS\System32\GroupPolicy\Machine</div><div class="line">DisplayName                    Guidelines of the local group</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/reading-registry-values-workaround" target="_blank" rel="external">Reading Registry Values (Workaround)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Reading Registry Values (Workaround)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 读取注册表键值失败</title>
    <link href="http://blog.vichamp.com/2017/07/03/reading-registry-values-fails/"/>
    <id>http://blog.vichamp.com/2017/07/03/reading-registry-values-fails/</id>
    <published>2017-07-02T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.670Z</updated>
    
    <content type="html"><![CDATA[<p>有些时候，读取注册表键值可能会失败，提示奇怪的错误信息：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="variable">$key</span> =  <span class="string">"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group  Policy\History\&#123;35378EAC-683F-11D2-A89A-00C04FBBCFA2&#125;\0"</span></div><div class="line"></div><div class="line"></div><div class="line">PS&gt;  <span class="built_in">Get-ItemProperty</span> -Path <span class="variable">$key</span></div><div class="line"><span class="built_in">Get-ItemProperty</span> :  Specified cast is not valid.</div><div class="line">At line:<span class="number">1</span> char:<span class="number">1</span></div><div class="line">+ <span class="built_in">Get-ItemProperty</span>  -Path <span class="variable">$key</span></div><div class="line">+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line">    + CategoryInfo          : NotSpecified: (:)  [Get-ItemProperty], InvalidCastException</div><div class="line">    + FullyQualifiedErrorId :  System.InvalidCastException,Microsoft.PowerShell.Commands.GetItemPropertyComma</div><div class="line">    nd</div><div class="line"></div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<p>当发生这种情况时，用 regedit.exe 检查注册表发现一个或多个键值已破坏。在我们的例子中，”lParam” 的值似乎在所有的 Windows 机器中都是错误的。Regedit.exe 报告“(invalid … value)”。</p>
<p>在这个例子中，<code>Get-ItemProperty</code> 指令并不会读出任何值。您无法也排除该值：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">PS&gt;  <span class="built_in">Get-ItemProperty</span> -Path <span class="variable">$key</span> -Include * -Exclude lParam</div><div class="line"><span class="built_in">Get-ItemProperty</span> :  Specified cast is not valid.</div><div class="line">At line:<span class="number">1</span> char:<span class="number">1</span></div><div class="line">+ <span class="built_in">Get-ItemProperty</span>  -Path <span class="variable">$key</span> -Include * -Exclude lParam</div><div class="line">+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line">    + CategoryInfo          : NotSpecified: (:)  [Get-ItemProperty], InvalidCastException</div><div class="line">    + FullyQualifiedErrorId :  System.InvalidCastException,Microsoft.PowerShell.Commands.GetItemPropertyCommand</div><div class="line"></div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<p>可以采取的措施是只读取合法的键值：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="built_in">Get-ItemProperty</span> -Path <span class="variable">$key</span> -Name DSPath</div><div class="line"></div><div class="line"></div><div class="line">DSPath       : LocalGPO</div><div class="line">PSPath       : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersi</div><div class="line">                on\Group Policy\History\&#123;<span class="number">35378</span>EAC-<span class="number">683</span>F-<span class="number">11</span>D2-A89A-<span class="number">00</span>C04FBBCFA2&#125;\<span class="number">0</span></div><div class="line">PSParentPath : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersi</div><div class="line">                on\Group Policy\History\&#123;<span class="number">35378</span>EAC-<span class="number">683</span>F-<span class="number">11</span>D2-A89A-<span class="number">00</span>C04FBBCFA2&#125;</div><div class="line">PSChildName  : <span class="number">0</span></div><div class="line">PSProvider   : Microsoft.PowerShell.Core\Registry</div><div class="line"></div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/reading-registry-values-fails" target="_blank" rel="external">Reading Registry Values Fails</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Reading Registry Values Fails
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 每日问候（带语音）</title>
    <link href="http://blog.vichamp.com/2017/06/30/greetings-of-the-day-with-voice/"/>
    <id>http://blog.vichamp.com/2017/06/30/greetings-of-the-day-with-voice/</id>
    <published>2017-06-29T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.664Z</updated>
    
    <content type="html"><![CDATA[<p>在前一个技能中我们解释了如何在 PowerShell 配置文件中增加个人问候。这个问候信息也可以朗读出来，假设音量打开的情况下。这对所有的 PowerShell 宿主都有效，包括 VSCode。</p>
<p>这将把代码增加到您的配置文件脚本中：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># create profile if it does not yet exist</span></div><div class="line"><span class="variable">$exists</span> = <span class="built_in">Test-Path</span> -Path <span class="variable">$Profile</span>.CurrentUserAllHosts</div><div class="line"><span class="keyword">if</span> (!<span class="variable">$exists</span>) </div><div class="line">&#123; </div><div class="line">    <span class="literal">$null</span> = <span class="built_in">New-Item</span> -Path <span class="variable">$Profile</span>.CurrentUserAllHosts -ItemType File -Force </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># add code to profile</span></div><div class="line"><span class="string">@'</span></div><div class="line">$greetings = </div><div class="line">'Hello there!',</div><div class="line">'Glad to see you!',</div><div class="line">'Happy coding!',</div><div class="line">'Have a great day!',</div><div class="line">'May the PowerShell be with you!'</div><div class="line"></div><div class="line">$text = $greetings | Get-Random</div><div class="line">$null = (New-Object -COM Sapi.SpVoice).Speak($text)</div><div class="line">'@ | <span class="built_in">Add-Content</span> -Path <span class="variable">$Profile</span>.CurrentUserAllHosts -Encoding Default</div></pre></td></tr></table></figure>
<p>要编辑用户配置文件，请运行这段代码：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PS&gt; notepad <span class="variable">$profile</span>.CurrentUserAllHosts</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/greetings-of-the-day-with-voice" target="_blank" rel="external">Greetings of the Day (with Voice)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Greetings of the Day (with Voice)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 每日问候</title>
    <link href="http://blog.vichamp.com/2017/06/29/greetings-of-the-day/"/>
    <id>http://blog.vichamp.com/2017/06/29/greetings-of-the-day/</id>
    <published>2017-06-28T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.658Z</updated>
    
    <content type="html"><![CDATA[<p>以下是一个在 PowerShell 中接受一个字符串数组并返回一个随机的字符串，可以用作自定义问候语的简单方法：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$greetings</span> = </div><div class="line"><span class="string">'Hello there!'</span>,</div><div class="line"><span class="string">'Glad to see you!'</span>,</div><div class="line"><span class="string">'Happy coding!'</span>,</div><div class="line"><span class="string">'Have a great day!'</span>,</div><div class="line"><span class="string">'May the PowerShell be with you!'</span></div><div class="line"></div><div class="line"><span class="variable">$greetings</span> | <span class="built_in">Get-Random</span></div></pre></td></tr></table></figure>
<p>您所需要做的只是将这段代码加到您的 profile 脚本，例如这样：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># create profile if it does not yet exist</span></div><div class="line"><span class="variable">$exists</span> = <span class="built_in">Test-Path</span> -Path <span class="variable">$Profile</span>.CurrentUserAllHosts</div><div class="line"><span class="keyword">if</span> (!<span class="variable">$exists</span>) </div><div class="line">&#123; </div><div class="line">    <span class="literal">$null</span> = <span class="built_in">New-Item</span> -Path <span class="variable">$Profile</span>.CurrentUserAllHosts -ItemType File -Force </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># add code to profile</span></div><div class="line"><span class="string">@'</span></div><div class="line">$greetings = </div><div class="line">'Hello there!',</div><div class="line">'Glad to see you!',</div><div class="line">'Happy coding!',</div><div class="line">'Have a great day!',</div><div class="line">'May the PowerShell be with you!'</div><div class="line"></div><div class="line">$greetings | Get-Random</div><div class="line">'@ | <span class="built_in">Add-Content</span> -Path <span class="variable">$Profile</span>.CurrentUserAllHosts -Encoding Default</div></pre></td></tr></table></figure>
<p>完成以后，PowerShell 将会使用自定义信息向您问候。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/greetings-of-the-day" target="_blank" rel="external">Greetings of the Day</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Greetings of the Day
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - PowerShell 中 LINQ 的真实情况</title>
    <link href="http://blog.vichamp.com/2017/06/28/truth-about-linq-in-powershell/"/>
    <id>http://blog.vichamp.com/2017/06/28/truth-about-linq-in-powershell/</id>
    <published>2017-06-27T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.651Z</updated>
    
    <content type="html"><![CDATA[<p>不久前有一些关于 LINQ，一个 .NET 查询语言，在 PowerShell 中用来提升代码速度的报告。</p>
<p>直到 PowerShell 真正支持 Linq 之前，使用 Linq 是非常冗长的，并且需要使用强类型和没有文档的方法。另外，同样的事可以使用纯 PowerShell 方法来做，速度的提升很少——至少对 IPPro 相关的任务不明显。</p>
<p>以下是一个使用很简单的 Linq 语句对数字求和的测试用例。它接受 Windows 文件夹下的所有文件，然后对所有文件的长度求和：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$numbers</span> = <span class="built_in">Get-ChildItem</span> -Path <span class="variable">$env:windir</span> -File | <span class="built_in">Select-Object</span> -ExpandProperty Length</div><div class="line"></div><div class="line">(<span class="built_in">Measure-Command</span> &#123;</div><div class="line">  <span class="variable">$sum1</span> = [Linq.Enumerable]::Sum([int[]]<span class="variable">$numbers</span>)</div><div class="line">&#125;).TotalMilliseconds</div><div class="line"></div><div class="line">(<span class="built_in">Measure-Command</span> &#123;</div><div class="line">  <span class="variable">$sum2</span> = (<span class="variable">$numbers</span> | <span class="built_in">Measure-Object</span> -Sum).Sum</div><div class="line">&#125;).TotalMilliseconds</div><div class="line"></div><div class="line">(<span class="built_in">Measure-Command</span> &#123;</div><div class="line">  <span class="variable">$sum3</span> = <span class="number">0</span></div><div class="line">  <span class="keyword">foreach</span> (<span class="variable">$number</span> <span class="keyword">in</span> <span class="variable">$numbers</span>) &#123; <span class="variable">$sum3</span>+=<span class="variable">$number</span> &#125;</div><div class="line">&#125;).TotalMilliseconds</div></pre></td></tr></table></figure>
<p>当您运行它多次的时候，您会观察到执行时间的输出。Linq 的方法可以使用，但是对数据类型十分敏感。例如，您需要将数字数组转换为 integer 数组，否则 Linq 的 <code>Sum()</code> 方法将不起作用。</p>
<p>可以提炼出两条法则：</p>
<ol>
<li><p>这时不值得使用 Linq，因为它尚未集成到 PowerShell 中，并且会产生难读的代码。它几乎相当于在 PowerShell 使用 C# 源代码。</p>
</li>
<li><p>如果您想提升速度，请在所有可能的地方避免使用管道。foreach 循环的执行速度比用管道将许多对象通过管道传到 <code>ForEach-Object</code> 快许多。</p>
</li>
</ol>
<p>If Linq was better integrated into PowerShell in the future, it would indeed be highly interesting.</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/truth-about-linq-in-powershell" target="_blank" rel="external">Truth about LINQ in PowerShell</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Truth about LINQ in PowerShell
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 神秘的 Windows 10 透明模式</title>
    <link href="http://blog.vichamp.com/2017/06/27/secret-windows-10-transparency-mode/"/>
    <id>http://blog.vichamp.com/2017/06/27/secret-windows-10-transparency-mode/</id>
    <published>2017-06-26T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.645Z</updated>
    
    <content type="html"><![CDATA[<p>When you open a native PowerShell console in Windows 10, you can hold down CTRL+SHIFT, then move your mouse wheel, to adjust console background color transparency, and let other windows shine through. The same works for cmd.exe as well, of course.<br>当您在 Windows 10 中打开一个原生的 PowerShell 控制台，按下 <code>CTRL</code> + <code>SHIFT</code> 键，然后滚动鼠标滚轮，就可以调节控制台背景色的透明度，并且让其它窗口的内容透射出来。当然这对 cmd.exe 也是有效的。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/secret-windows-10-transparency-mode" target="_blank" rel="external">Secret Windows 10 Transparency Mode</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Secret Windows 10 Transparency Mode
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 清空 DNS 缓存</title>
    <link href="http://blog.vichamp.com/2017/06/26/flush-dns-cache/"/>
    <id>http://blog.vichamp.com/2017/06/26/flush-dns-cache/</id>
    <published>2017-06-25T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.638Z</updated>
    
    <content type="html"><![CDATA[<p>Windows 使用了 DNS 缓存技术，如果改变了 DNS 服务器，您需要刷新 DNS 缓存以使新的设置生效。PowerShell 对传统的控制台命令是有好的，所以只需要在 PowerShell 中运行这行代码：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PS&gt; ipconfig /flushdns</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/flush-dns-cache" target="_blank" rel="external">Flush DNS Cache</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Flush DNS Cache
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 显示文件夹树</title>
    <link href="http://blog.vichamp.com/2017/06/23/displaying-folder-tree/"/>
    <id>http://blog.vichamp.com/2017/06/23/displaying-folder-tree/</id>
    <published>2017-06-22T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.633Z</updated>
    
    <content type="html"><![CDATA[<p>PowerShell 对旧的控制台命令是十分友好的，所以要显示文件夹的树形结构，使用旧的 “tree” 命令是十分简单的。它最好工作在一个原生的 PowerShell 控制台中，因为编辑器往往使用不同的字符集。请试试这个命令：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PS&gt; Tree <span class="variable">$home</span></div></pre></td></tr></table></figure>
<p>请确保您是在一个原生的 PowerShell 控制台中或 VSCode 中运行这段代码。您还可以将结果通过管道输出到 clip.exe 并将它粘贴到一个文本文档中：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PS&gt; Tree <span class="variable">$home</span> | clip.exe</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/displaying-folder-tree" target="_blank" rel="external">Displaying Folder Tree</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Displaying Folder Tree
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 使用缓存的端口文件</title>
    <link href="http://blog.vichamp.com/2017/06/22/using-cached-port-file/"/>
    <id>http://blog.vichamp.com/2017/06/22/using-cached-port-file/</id>
    <published>2017-06-21T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.627Z</updated>
    
    <content type="html"><![CDATA[<p>在前一个技能中我们介绍了如何用 PowerShell 通过 IANA 下载端口分配信息。这个过程需要 Internet 连接并且需要一段时间。所以以下代码会查找缓存的 CSV 文件。如果缓存文件存在，端口信息会从离线文件中加载，否则将在线加载数据，并写入缓存文件。请特别注意如何使用 <code>Tee-Object</code> 命令创建缓存文件：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$url</span> = <span class="string">'https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.csv'</span></div><div class="line"><span class="variable">$CSVFile</span> = <span class="string">"<span class="variable">$env:temp</span>\ports.csv"</span></div><div class="line"><span class="variable">$exists</span> = <span class="built_in">Test-Path</span> -Path <span class="variable">$CSVFile</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (!<span class="variable">$exists</span>)</div><div class="line">&#123;</div><div class="line">  <span class="built_in">Write-Warning</span> <span class="string">"Retrieving data online..."</span></div><div class="line"></div><div class="line">  <span class="variable">$portinfo</span> = <span class="built_in">Invoke-WebRequest</span> -Uri <span class="variable">$Url</span> -UseBasicParsing | `</div><div class="line">    <span class="built_in">Select-Object</span> -ExpandProperty Content | `</div><div class="line">    <span class="built_in">Tee-Object</span> -FilePath <span class="variable">$CSVFile</span> | <span class="built_in">ConvertFrom-Csv</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">  <span class="built_in">Write-Warning</span> <span class="string">"Loading cached file..."</span></div><div class="line">  <span class="variable">$portinfo</span> = <span class="built_in">Import-Csv</span> -Path <span class="variable">$CSVFile</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$portinfo</span> | <span class="built_in">Out-GridView</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/using-cached-port-file" target="_blank" rel="external">Using Cached Port File</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Using Cached Port File
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 获取端口分配列表</title>
    <link href="http://blog.vichamp.com/2017/06/21/get-list-of-port-assignments/"/>
    <id>http://blog.vichamp.com/2017/06/21/get-list-of-port-assignments/</id>
    <published>2017-06-20T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.624Z</updated>
    
    <content type="html"><![CDATA[<p>IANA（互联网数字分配机构）维护了一个包含所有已知的端口分配的 CSV 文件。PowerShell 可以为您下载这个列表：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$out</span> = <span class="string">"<span class="variable">$env:temp</span>\portlist.csv"</span></div><div class="line"><span class="variable">$url</span> = <span class="string">'https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.csv'</span></div><div class="line"><span class="variable">$web</span> = <span class="built_in">Invoke-WebRequest</span> -Uri <span class="variable">$url</span> -UseBasicParsing -OutFile <span class="variable">$out</span></div><div class="line"><span class="built_in">Import-Csv</span> -Path <span class="variable">$out</span> -Encoding UTF8</div></pre></td></tr></table></figure>
<p>返回的结果是一个包含所有的端口分配的面向对象格式的列表。接下来您可以使用这个信息例如过滤特定的端口：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Import-Csv</span> -Path <span class="variable">$out</span> -Encoding UTF8 |</div><div class="line">    <span class="built_in">Where-Object</span> <span class="string">'transport protocol'</span> <span class="nomarkup">-eq</span> <span class="string">'tcp'</span> |</div><div class="line">    <span class="built_in">Where-Object</span> <span class="string">'Port Number'</span> <span class="nomarkup">-lt</span> <span class="number">1000</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/get-list-of-port-assignments" target="_blank" rel="external">Get List of Port Assignments</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Get List of Port Assignments
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 世界时钟</title>
    <link href="http://blog.vichamp.com/2017/06/20/world-time-clock/"/>
    <id>http://blog.vichamp.com/2017/06/20/world-time-clock/</id>
    <published>2017-06-19T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.618Z</updated>
    
    <content type="html"><![CDATA[<p>PowerShell 提供了 <code>Get-TimeZone</code> 命令，能返回所有定义过的时区和它们的时差。以下是列出世界时钟相关的代码：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$isSummer</span> = (<span class="built_in">Get-Date</span>).IsDaylightSavingTime()</div><div class="line"></div><div class="line"></div><div class="line">Get-TimeZone -ListAvailable | <span class="built_in">ForEach-Object</span> &#123; </div><div class="line">    <span class="variable">$dateTime</span> = [DateTime]::UtcNow + <span class="variable">$_</span>.BaseUtcOffset</div><div class="line">    <span class="variable">$cities</span> = <span class="variable">$_</span>.DisplayName.Split(<span class="string">')'</span>)[-<span class="number">1</span>].Trim()</div><div class="line">    <span class="keyword">if</span> (<span class="variable">$isSummer</span> -and <span class="variable">$_</span>.SupportsDaylightSavingTime)</div><div class="line">    &#123;</div><div class="line">        <span class="variable">$dateTime</span> = <span class="variable">$dateTime</span>.AddHours(<span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="string">'&#123;0,-30&#125;: &#123;1:HH:mm"h"&#125; (&#123;2&#125;)'</span> -f <span class="variable">$_</span>.Id, <span class="variable">$dateTime</span>, <span class="variable">$cities</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>结果类似如下：</p>
<pre><code>Dateline Standard Time         : 18:41h ()
UTC-11                         : 19:41h (Coordinated Universal Time-11)
Aleutian Standard Time         : 21:41h (Aleutian Islands)
Hawaiian Standard Time         : 20:41h (Hawaii)
Marquesas Standard Time        : 21:11h (Marquesas Islands)
Alaskan Standard Time          : 22:41h (Alaska)
UTC-09                         : 21:41h (Coordinated Universal Time-09)
Pacific Standard Time (Mexico) : 23:41h (Baja California)
UTC-08                         : 22:41h (Coordinated Universal Time-08)
Pacific Standard Time          : 23:41h ()
US Mountain Standard Time      : 23:41h (Arizona)
Mountain Standard Time (Mexico): 00:41h (Chihuahua, La Paz, Mazatlan)
Mountain Standard Time         : 00:41h ()
Central America Standard Time  : 00:41h (Central America)
Central Standard Time          : 01:41h ()
Easter Island Standard Time    : 01:41h (Easter Island)
Central Standard Time (Mexico) : 01:41h (Guadalajara, Mexico City, Monterrey)
Canada Central Standard Time   : 00:41h (Saskatchewan)
SA Pacific Standard Time       : 01:41h (Bogota, Lima, Quito, Rio Branco)
Eastern Standard Time (Mexico) : 02:41h (Chetumal)
Eastern Standard Time          : 02:41h ()
</code></pre><a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/world-time-clock" target="_blank" rel="external">World Time Clock</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - World Time Clock
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 检查夏时制</title>
    <link href="http://blog.vichamp.com/2017/06/19/check-for-daylight-savings-time/"/>
    <id>http://blog.vichamp.com/2017/06/19/check-for-daylight-savings-time/</id>
    <published>2017-06-18T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.610Z</updated>
    
    <content type="html"><![CDATA[<p>以下用 PowerShell 来查看是否使用了夏时制的方法——进行 GMT 计算时可能需要的细节：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="built_in">Get-Date</span>).IsDaylightSavingTime()</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/check-for-daylight-savings-time" target="_blank" rel="external">Check for Daylight Savings Time</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Check for Daylight Savings Time
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 设置时区</title>
    <link href="http://blog.vichamp.com/2017/06/16/setting-time-zone/"/>
    <id>http://blog.vichamp.com/2017/06/16/setting-time-zone/</id>
    <published>2017-06-15T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.600Z</updated>
    
    <content type="html"><![CDATA[<p>只有拥有了管理员特权才可以修改电脑的时间和日期，但任何用户都可以修改时区，例如当您在旅游时。PowerShell 5 提供了一系列非常简单的 cmdlet 来管理时区。首先，检查您的当前设置：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">PS&gt; Get-TimeZone</div><div class="line"></div><div class="line"></div><div class="line">Id                         : W. Europe Standard Time</div><div class="line">DisplayName                : (UTC+<span class="number">01</span>:<span class="number">00</span>) Amsterdam, Berlin, Bern, Rom, Stockholm, Wien</div><div class="line">StandardName               : Mitteleuropäische Zeit</div><div class="line">DaylightName               : Mitteleuropäische Sommerzeit</div><div class="line">BaseUtcOffset              : <span class="number">01</span>:<span class="number">00</span>:<span class="number">00</span></div><div class="line">SupportsDaylightSavingTime : True</div></pre></td></tr></table></figure>
<p>下一步，尝试修改时区。以下代码打开一个包含所有可用时区的窗口：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PS&gt; Get-TimeZone -ListAvailable | <span class="built_in">Out-GridView</span></div></pre></td></tr></table></figure>
<p>当您知道您希望设置的时区的正式 ID 后，请使用 <code>Set-TimeZone</code> 命令。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">PS&gt; Set-TimeZone -Id <span class="string">'Chatham Islands Standard Time'</span></div><div class="line"></div><div class="line">PS&gt; <span class="built_in">Get-Date</span></div><div class="line"></div><div class="line">Samstag, <span class="number">27</span>. Mai <span class="number">2017</span> <span class="number">18</span>:<span class="number">32</span>:<span class="number">53</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">PS&gt; Set-TimeZone -Id <span class="string">'W. Europe Standard Time'</span></div><div class="line"></div><div class="line">PS&gt; <span class="built_in">Get-Date</span></div><div class="line"></div><div class="line">Samstag, <span class="number">27</span>. Mai <span class="number">2017</span> <span class="number">07</span>:<span class="number">48</span>:<span class="number">02</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/setting-time-zone" target="_blank" rel="external">Setting Time Zone</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Setting Time Zone
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 查找一个脚本中的所有变量</title>
    <link href="http://blog.vichamp.com/2017/06/15/finding-all-variables-in-a-script/"/>
    <id>http://blog.vichamp.com/2017/06/15/finding-all-variables-in-a-script/</id>
    <published>2017-06-14T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.593Z</updated>
    
    <content type="html"><![CDATA[<p>在前一个技能中我们掩饰了如何分析一段脚本块的内容并且搜索变量或命令。这种技术也适用于基于文本的脚本。以下脚本将会检查自己并且提取出变量和命令：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$filepath</span> = <span class="variable">$PSCommandPath</span></div><div class="line"><span class="variable">$tokens</span> = <span class="variable">$errors</span> = <span class="literal">$null</span></div><div class="line"></div><div class="line"><span class="variable">$ast</span> = [System.Management.Automation.Language.Parser]::ParseFile(<span class="variable">$filepath</span>, [ref]<span class="variable">$tokens</span>, [ref]<span class="variable">$errors</span> )</div><div class="line"></div><div class="line"><span class="comment"># find variables</span></div><div class="line"><span class="variable">$ast</span>.FindAll( &#123; <span class="literal">$true</span> &#125;, <span class="literal">$true</span>) | </div><div class="line">  <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.GetType().Name <span class="nomarkup">-eq</span> <span class="string">'VariableExpressionAst'</span> &#125; |</div><div class="line">  <span class="built_in">Select-Object</span> -Property VariablePath -ExpandProperty Extent |</div><div class="line">  <span class="built_in">Select-Object</span> -Property * -ExcludeProperty *ScriptPosition |</div><div class="line">  <span class="built_in">Out-GridView</span> -Title <span class="string">'Variables'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># find commands</span></div><div class="line"><span class="variable">$ast</span>.FindAll( &#123; <span class="literal">$true</span> &#125;, <span class="literal">$true</span>)  | </div><div class="line">  <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.GetType().Name <span class="nomarkup">-eq</span> <span class="string">'CommandAst'</span> &#125; |</div><div class="line">  <span class="built_in">Select-Object</span> -ExpandProperty Extent  |</div><div class="line">  <span class="built_in">Select-Object</span> -Property * -ExcludeProperty *ScriptPosition |</div><div class="line">  <span class="built_in">Out-GridView</span> -Title <span class="string">'Commands'</span></div></pre></td></tr></table></figure>
<p>请确保将脚本保存到硬盘，或为 <code>$filepath</code> 指定一个不同的实际存在的脚本路径。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/finding-all-variables-in-a-script" target="_blank" rel="external">Finding All Variables in a Script</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Finding All Variables in a Script
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 查找一个脚本块中的所有变量</title>
    <link href="http://blog.vichamp.com/2017/06/14/finding-all-variables-in-a-script-block/"/>
    <id>http://blog.vichamp.com/2017/06/14/finding-all-variables-in-a-script-block/</id>
    <published>2017-06-13T16:00:00.000Z</published>
    <updated>2017-07-13T01:34:45.583Z</updated>
    
    <content type="html"><![CDATA[<p>要分析一个脚本快中的内容，您可以简单地检查 AST，并且，例如创建一个包含代码中所有变量的清单：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$code</span> = &#123;</div><div class="line"></div><div class="line">    <span class="variable">$a</span> = <span class="string">"Test"</span></div><div class="line">    <span class="variable">$b</span> = <span class="number">12</span></div><div class="line">    <span class="built_in">Get-Service</span></div><div class="line">    <span class="built_in">Get-Process</span></div><div class="line">    <span class="variable">$berta</span> = <span class="number">100</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="variable">$code</span>.Ast.FindAll( &#123; <span class="literal">$true</span> &#125;, <span class="literal">$true</span>) |</div><div class="line">    <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.GetType().Name <span class="nomarkup">-eq</span> <span class="string">'VariableExpressionAst'</span> &#125; |</div><div class="line">    <span class="built_in">Select-Object</span> -Property VariablePath -ExpandProperty Extent |</div><div class="line">    <span class="built_in">Out-GridView</span></div></pre></td></tr></table></figure>
<p>如果您想查看所有的命令，请试试以下代码：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$code</span> = &#123;</div><div class="line"></div><div class="line">    <span class="variable">$a</span> = <span class="string">"Test"</span></div><div class="line">    <span class="variable">$b</span> = <span class="number">12</span></div><div class="line">    <span class="built_in">Get-Service</span></div><div class="line">    <span class="built_in">Get-Process</span></div><div class="line">    <span class="variable">$berta</span> = <span class="number">100</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="variable">$code</span>.Ast.FindAll( &#123; <span class="literal">$true</span> &#125;, <span class="literal">$true</span>)  |</div><div class="line">    <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.GetType().Name <span class="nomarkup">-eq</span> <span class="string">'CommandAst'</span> &#125; |</div><div class="line">    <span class="built_in">Select-Object</span> -ExpandProperty Extent  |</div><div class="line">    <span class="built_in">Select-Object</span> -Property * -ExcludeProperty *ScriptPosition |</div><div class="line">    <span class="built_in">Out-GridView</span></div></pre></td></tr></table></figure>
<p>这在根据脚本块自动生成文档的时候非常有用。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/finding-all-variables-in-a-script-block" target="_blank" rel="external">Finding All Variables in a Script Block</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Finding All Variables in a Script Block
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
</feed>
