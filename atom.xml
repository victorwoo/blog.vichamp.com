<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>叹为观止</title>
  <subtitle>追求卓越，成功自然来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.vichamp.com/"/>
  <updated>2017-05-11T01:41:38.915Z</updated>
  <id>http://blog.vichamp.com/</id>
  
  <author>
    <name>John Doe</name>
    <email>victorwoo@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PowerShell 技能连载 - .Replace() 和 -replace 的区别</title>
    <link href="http://blog.vichamp.com/2017/05/10/how-replace-and-replace-differ/"/>
    <id>http://blog.vichamp.com/2017/05/10/how-replace-and-replace-differ/</id>
    <published>2017-05-09T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.915Z</updated>
    
    <content type="html"><![CDATA[<p>有两种方法可以替换一个字符串中的问本：<code>Replace()</code> 方法，和 <code>-replace</code> 操作符。它们的工作机制是不同的。</p>
<p><code>Replace()</code> 是大小写敏感的，能够将文本替换为新的文本：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="string">'Hello World.'</span>.Replace(<span class="string">'o'</span>, <span class="string">'0'</span>)</div><div class="line">Hell0 W0rld</div><div class="line"></div><div class="line">PS&gt; <span class="string">'Hello World.'</span>.Replace(<span class="string">'ell'</span>,<span class="string">'oo'</span>)</div><div class="line">Hooo World</div></pre></td></tr></table></figure>
<p><code>-replace</code> 操作符缺省是大小写不敏感的（如果希望大小写敏感，请使用 <code>-creplace</code>）。它接受一个正则表达式输入，很多人忽略了这个功能：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="string">'Hello World.'</span> <span class="nomarkup">-replace</span> <span class="string">'ell'</span>, <span class="string">'oo'</span></div><div class="line">Hooo World.</div><div class="line"></div><div class="line">PS&gt; <span class="string">'Hello World.'</span> <span class="nomarkup">-replace</span> <span class="string">'.'</span>, <span class="string">'!'</span></div><div class="line">!!!!!!!!!!!!</div></pre></td></tr></table></figure>
<p>第二个输出会让不了解正则表达式的人感到惊讶。如果您希望用 <code>-replace</code> 来替换静态文本，请确保对文本进行转义：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="string">'Hello World.'</span> <span class="nomarkup">-replace</span> [Regex]::Escape(<span class="string">'.'</span>), <span class="string">'!'</span></div><div class="line">Hello World!</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/how-replace-and-replace-differ" target="_blank" rel="external">How .Replace() and -replace differ</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - How .Replace() and -replace differ
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - HTML 高级编码</title>
    <link href="http://blog.vichamp.com/2017/05/09/html-encoding-advanced/"/>
    <id>http://blog.vichamp.com/2017/05/09/html-encoding-advanced/</id>
    <published>2017-05-08T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.909Z</updated>
    
    <content type="html"><![CDATA[<p>.NET 静态方法 <code>HtmlEncode</code> 能够较好地将普通字符进行编码，但是对于许多特殊字符会处理失败。要正确地对所有字符编码，我们编写了一个 <code>ConvertTo-EncodedHtml</code> 函数：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> ConvertTo-EncodedHTML(<span class="variable">$HtmlText</span>)</div><div class="line">&#123;</div><div class="line"></div><div class="line">  <span class="variable">$chars</span> = [Web.HttpUtility]::HtmlEncode(<span class="variable">$HtmlText</span>).ToCharArray()</div><div class="line">  <span class="variable">$txt</span> = <span class="built_in">New-Object</span> System.Text.StringBuilder</div><div class="line">  <span class="literal">$null</span> = . &#123;</div><div class="line">      <span class="keyword">foreach</span>(<span class="variable">$c</span> <span class="keyword">in</span> <span class="variable">$chars</span>)</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">if</span> ([int]<span class="variable">$c</span> <span class="nomarkup">-gt</span> <span class="number">127</span>)</div><div class="line">        &#123;</div><div class="line">          <span class="variable">$txt</span>.Append(<span class="string">"&amp;#"</span> + [int]<span class="variable">$c</span> + <span class="string">";"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">          <span class="variable">$txt</span>.Append(<span class="variable">$c</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="variable">$txt</span>.ToString()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个函数检查所有 ASCII 代码大于 127 的字符并将这些字符转换为编码后的版本：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PS&gt; Convert-EncodedHTML -HtmlText <span class="string">"A – s ‘Test’"</span></div><div class="line">A &amp;<span class="comment">#8211; s  &amp;#8216;Test&amp;#8217;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/html-encoding-advanced" target="_blank" rel="external">HTML Encoding Advanced</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - HTML Encoding Advanced
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - HTML 编码</title>
    <link href="http://blog.vichamp.com/2017/05/08/html-encoding/"/>
    <id>http://blog.vichamp.com/2017/05/08/html-encoding/</id>
    <published>2017-05-07T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.901Z</updated>
    
    <content type="html"><![CDATA[<p>有一个 .NET 的静态方法可以对一段文本进行 HTML 编码，例如如果您希望在 HTML 输出中正常显示一段文本：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PS&gt;  [System.Web.HttpUtility]::HtmlEncode(<span class="string">'Österreich heißt so.'</span>)</div><div class="line">&amp;<span class="comment">#214;sterreich hei&amp;#223;t so.</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/html-encoding" target="_blank" rel="external">HTML Encoding</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - HTML Encoding
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 从德国媒体数据库下载视频</title>
    <link href="http://blog.vichamp.com/2017/05/05/downloading-videos-from-german-media-databases/"/>
    <id>http://blog.vichamp.com/2017/05/05/downloading-videos-from-german-media-databases/</id>
    <published>2017-05-04T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.894Z</updated>
    
    <content type="html"><![CDATA[<p>在德国，有一些公开的媒体数据库，里面有公共站点发布的电视内容。只需要用一小段 PowerShell 代码就可以解析 JSON 数据，在一个列表中显示电视节目，并使你能够选择某项来下载。</p>
<p>请注意包含下载链接的 JSON 文件非常大，所以需要过一段时间才能显示出视频列表。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#requires -Version 3.0</span></div><div class="line"></div><div class="line"><span class="comment"># here is the list of download URLs - get it and </span></div><div class="line"><span class="comment"># convert the JSON format</span></div><div class="line"><span class="variable">$url</span> = <span class="string">'http://www.mediathekdirekt.de/good.json'</span></div><div class="line"><span class="variable">$web</span> = <span class="built_in">Invoke-WebRequest</span> -Uri <span class="variable">$url</span> -UseBasicParsing </div><div class="line"><span class="variable">$videos</span> = <span class="variable">$web</span>.Content | <span class="built_in">ConvertFrom-Json</span> </div><div class="line"></div><div class="line"><span class="comment"># get all videos, create a nice title to display,</span></div><div class="line"><span class="comment"># and attach the original data to each entry</span></div><div class="line"><span class="variable">$videos</span> |</div><div class="line"><span class="built_in">ForEach-Object</span> &#123;</div><div class="line">  <span class="variable">$title</span> = <span class="string">'&#123;0&#125; - &#123;1&#125;'</span> -f <span class="variable">$_</span>[<span class="number">2</span>], <span class="variable">$_</span>[<span class="number">5</span>]</div><div class="line">  <span class="variable">$title</span> | <span class="built_in">Add-Member</span> -MemberType NoteProperty -Name <span class="keyword">Data</span> -Value <span class="variable">$_</span> -PassThru</div><div class="line">&#125; |</div><div class="line"><span class="built_in">Sort-Object</span> |</div><div class="line"><span class="built_in">Out-GridView</span> -Title <span class="string">'Video'</span> -OutputMode Multiple |</div><div class="line"><span class="built_in">ForEach-Object</span> &#123;</div><div class="line">  <span class="comment"># get the actual download info from the selected videos</span></div><div class="line">  <span class="comment"># and do the download</span></div><div class="line">  <span class="variable">$url</span> = <span class="variable">$_</span>.Data[<span class="number">6</span>]</div><div class="line">  <span class="variable">$filename</span> = <span class="built_in">Split-Path</span> -Path <span class="variable">$url</span> -Leaf</div><div class="line">  <span class="comment"># videos are saved into your TEMP folder unless you</span></div><div class="line">  <span class="comment"># specify a different folder below</span></div><div class="line">  <span class="variable">$filepath</span> = <span class="built_in">Join-Path</span> -Path <span class="variable">$env:temp</span> -ChildPath <span class="variable">$filename</span></div><div class="line">  <span class="built_in">Invoke-WebRequest</span> -Uri <span class="variable">$url</span> -OutFile <span class="variable">$filepath</span> -UseBasicParsing</div><div class="line">  <span class="built_in">Invoke-Item</span> -Path <span class="variable">$filepath</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/downloading-videos-from-german-media-databases" target="_blank" rel="external">Downloading Videos From German Media Databases</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Downloading Videos From German Media Databases
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 批量打印 Word 文档</title>
    <link href="http://blog.vichamp.com/2017/05/05/bulk-printing-word-documents/"/>
    <id>http://blog.vichamp.com/2017/05/05/bulk-printing-word-documents/</id>
    <published>2017-05-04T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.888Z</updated>
    
    <content type="html"><![CDATA[<p>这行代码将在您的配置文件中查找所有 Word 文档：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Get-ChildItem</span> -Path <span class="variable">$home</span> -Filter *.doc* -Recurse</div></pre></td></tr></table></figure>
<p>If you’d like, you can easily print them all. Here is how:<br>如果需要，可以将它们全部打印出来。以下是具体方法：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Get-ChildItem</span> -Path <span class="variable">$home</span> -Filter *.doc* -Recurse |</div><div class="line">  <span class="built_in">ForEach-Object</span> &#123;</div><div class="line">    <span class="built_in">Start-Process</span> -FilePath <span class="variable">$_</span>.FullName -Verb Print -Wait</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>它最重要的部分是 <code>-Wait</code> 参数：如果缺少了它，PowerShell 将会同时启动多个 Word 的实例，并行打印所有文档。这将耗尽您系统的资源。使用 <code>-Wait</code> 参数以后，PowerShell 将等待前一个 Word 打印完之后再启动下一个实例。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/bulk-printing-word-documents" target="_blank" rel="external">Bulk Printing Word Documents</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Bulk Printing Word Documents
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 翻译错误记录</title>
    <link href="http://blog.vichamp.com/2017/05/03/translating-error-records/"/>
    <id>http://blog.vichamp.com/2017/05/03/translating-error-records/</id>
    <published>2017-05-02T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.882Z</updated>
    
    <content type="html"><![CDATA[<p>Whenever PowerShell records an error, it wraps it in an Error Record object. Here is a function that takes such an error record and extracts the useful information:<br>当 PowerShell 记录一个错误时，它将错误信息包装在一个 Error Record 对象中。以下是一个处理这种错误记录并解析有用信息的函数：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#requires -Version 3.0</span></div><div class="line"><span class="keyword">function</span> Get-ErrorDetail</div><div class="line">&#123;</div><div class="line">  <span class="keyword">param</span></div><div class="line">  (</div><div class="line">    [Parameter(Mandatory,ValueFromPipeline)]</div><div class="line">    <span class="variable">$e</span></div><div class="line">  )</div><div class="line">  <span class="keyword">process</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="variable">$e</span> -is [Management.Automation.ErrorRecord])</div><div class="line">    &#123;</div><div class="line">      [PSCustomObject]@&#123;</div><div class="line">        Reason    = <span class="variable">$e</span>.CategoryInfo.Reason</div><div class="line">        Exception = <span class="variable">$e</span>.Exception.Message</div><div class="line">        Target    = <span class="variable">$e</span>.CategoryInfo.TargetName</div><div class="line">        Script    = <span class="variable">$e</span>.InvocationInfo.ScriptName</div><div class="line">        Line      = <span class="variable">$e</span>.InvocationInfo.ScriptLineNumber</div><div class="line">        Column    = <span class="variable">$e</span>.InvocationInfo.OffsetInLine</div><div class="line">        Datum     = <span class="built_in">Get-Date</span></div><div class="line">        User      = <span class="variable">$env:USERNAME</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果您想知道最后的错误信息是什么，请试试这个：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; <span class="variable">$error</span> | Get-ErrorDetail | <span class="built_in">Out-GridView</span></div><div class="line"></div><div class="line">PS C:\&gt;</div></pre></td></tr></table></figure>
<p>或者，您现在可以简单地命令一个 cmdlet 缓存它的错误信息，并在晚些时候处理它们。这个例子递归地在 Windows 文件夹中搜索 PowerShell 脚本。您可以获取结果，以及搜索时发生的所有错误的详细信息：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$files</span> = <span class="built_in">Get-ChildItem</span> -Path c:\Windows -Filter *.ps1 -Recurse -ErrorAction SilentlyContinue -ErrorVariable myErrors</div><div class="line"></div><div class="line"><span class="variable">$myErrors</span>| Get-ErrorDetail | <span class="built_in">Out-GridView</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/translating-error-records" target="_blank" rel="external">Translating Error Records</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Translating Error Records
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 用 Out-GridView 启用 AD 用户</title>
    <link href="http://blog.vichamp.com/2017/05/02/enable-ad-users-with-out-gridview/"/>
    <id>http://blog.vichamp.com/2017/05/02/enable-ad-users-with-out-gridview/</id>
    <published>2017-05-01T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.876Z</updated>
    
    <content type="html"><![CDATA[<p>有些时候在 PowerShell 中只需要几行代码就可以创造出很有用的支持工具。以下是一个显示所有禁用的 AD 用户的例子。您可以选择一个（或按住 CTRL 键选择多个），然后点击 OK，这些用户将会被启用：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#requires -Version 3.0 -Modules ActiveDirectory</span></div><div class="line">Search-ADAccount -AccountDisabled |</div><div class="line">  <span class="built_in">Out-GridView</span> -Title <span class="string">'Who should be enabled?'</span> -OutputMode Multiple |</div><div class="line">  <span class="comment"># remove -WhatIf to actually enable accounts</span></div><div class="line">  Enable-ADAccount -WhatIf</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/enable-ad-users-with-out-gridview" target="_blank" rel="external">Enable AD Users with Out-GridView</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Enable AD Users with Out-GridView
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 将 AD 用户转为哈希表</title>
    <link href="http://blog.vichamp.com/2017/05/01/turning-ad-user-into-a-hash-table/"/>
    <id>http://blog.vichamp.com/2017/05/01/turning-ad-user-into-a-hash-table/</id>
    <published>2017-04-30T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.871Z</updated>
    
    <content type="html"><![CDATA[<p>有些时候从一个指定的 AD 用户读取所有属性到一个哈希表中十分有用。通过这种方法，您可以编辑他们，并使用 <code>Set-ADUser</code> 和它的 <code>-Add</code> 或 <code>-Replace</code> 参数将他们应用于另一个用户账户。</p>
<p>以下是将所有 AD 用户属性读到一个哈希表中的方法：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#requires -Version 3.0 -Modules ActiveDirectory</span></div><div class="line"></div><div class="line"><span class="variable">$blacklist</span> = <span class="string">'SID'</span>, <span class="string">'LastLogonDate'</span>, <span class="string">'SAMAccountName'</span></div><div class="line"></div><div class="line"><span class="variable">$user</span> = Get-ADUser -Identity NAMEOFUSER -Properties *</div><div class="line"><span class="variable">$name</span> = <span class="variable">$user</span> | <span class="built_in">Get-Member</span> -MemberType *property | <span class="built_in">Select-Object</span> -ExpandProperty Name</div><div class="line"></div><div class="line"><span class="variable">$hash</span> = [Ordered]@&#123;&#125;</div><div class="line"><span class="variable">$name</span> |</div><div class="line">  <span class="built_in">Sort-Object</span> |</div><div class="line">  <span class="built_in">Where-Object</span> &#123;</div><div class="line">    <span class="variable">$_</span> <span class="nomarkup">-notin</span> <span class="variable">$blacklist</span></div><div class="line">  &#125; |</div><div class="line">  <span class="built_in">ForEach-Object</span> &#123;</div><div class="line">  <span class="variable">$hash</span>[<span class="variable">$_</span>] = <span class="variable">$user</span>.<span class="variable">$_</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请注意 <code>$blacklist</code> 的使用：这个列表可以包含任何希望排除的属性名。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/turning-ad-user-into-a-hash-table" target="_blank" rel="external">Turning AD User into a Hash Table</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Turning AD User into a Hash Table
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 克隆文件夹结构（含 NTFS 权限） – 第二部分</title>
    <link href="http://blog.vichamp.com/2017/04/28/cloning-folder-structures-with-ntfs-permissions-part-2/"/>
    <id>http://blog.vichamp.com/2017/04/28/cloning-folder-structures-with-ntfs-permissions-part-2/</id>
    <published>2017-04-27T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.856Z</updated>
    
    <content type="html"><![CDATA[<p>在前一个技能中我们演示了 <code>Get-FolderStructureWithPermission</code> 如何以结构化的形式记录并创建一个包含所有嵌套文件夹的清单，包含它们各自的 NTFS 安全设置。结果可以保存到一个变量中，或用 <code>Export-Csv</code> 序列化后保存到磁盘中。</p>
<p>今天我们演示第二部分：当您拥有一个指定文件夹结构的信息之后，可以使用这个 <code>Set-FolderStructureWithPermission</code>。它输入一个要克隆其结构的文件夹路径，加上通过 <code>Get-FolderStructureWithPermission</code> 获得的结构信息：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#requires -RunAsAdministrator</span></div><div class="line"></div><div class="line"><span class="keyword">function</span> Set-FolderStructureWithPermission</div><div class="line">&#123;</div><div class="line">  <span class="keyword">param</span></div><div class="line">  (</div><div class="line">    [String]</div><div class="line">    [Parameter(Mandatory)]</div><div class="line">    <span class="variable">$Path</span>,</div><div class="line"></div><div class="line">    [Object[]]</div><div class="line">    <span class="variable">$folderInfo</span></div><div class="line">  )</div><div class="line"></div><div class="line">  <span class="variable">$folderInfo</span> | <span class="built_in">ForEach-Object</span> &#123;</div><div class="line">    <span class="variable">$relativePath</span> = <span class="variable">$_</span>.Path</div><div class="line">    <span class="variable">$sddl</span> = <span class="variable">$_</span>.SDDL</div><div class="line"></div><div class="line">    <span class="variable">$newPath</span> = <span class="built_in">Join-Path</span> -Path <span class="variable">$Path</span> -ChildPath <span class="variable">$relativePath</span></div><div class="line">    <span class="variable">$exists</span> = <span class="built_in">Test-Path</span> -Path <span class="variable">$newPath</span></div><div class="line">    <span class="keyword">if</span> (<span class="variable">$exists</span> <span class="nomarkup">-eq</span> <span class="literal">$false</span>)</div><div class="line">    &#123;</div><div class="line">      <span class="literal">$null</span>=<span class="built_in">New-Item</span> -Path <span class="variable">$newPath</span> -ItemType Directory -Force</div><div class="line">    &#125;</div><div class="line">    <span class="variable">$sd</span> = <span class="built_in">Get-Acl</span> -Path <span class="variable">$newPath</span></div><div class="line">    <span class="variable">$sd</span>.SetSecurityDescriptorSddlForm(<span class="variable">$sddl</span>)</div><div class="line">    <span class="built_in">Set-Acl</span> -Path <span class="variable">$newPath</span> -AclObject <span class="variable">$sd</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于设置 NTFS 权限的需要，这个函数需要管理员特权才能运行。</p>
<p>免责声明：这里呈现的所有代码仅供学习使用。由于我们没有投入大量精力去测试它，所以没有任何保障，而且它并不是生产准备就绪的代码。您有责任对这段代码进行测试，并决定它是否完美符合您的需要。</p>
<p>一个典型的用例是克隆一个现有的文件夹结构：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># clone user profile</span></div><div class="line"><span class="variable">$infos</span> = Get-FolderStructureWithPermission -Path <span class="variable">$home</span></div><div class="line">Set-FolderStructureWithPermission -Path c:\CloneHere -folderInfo <span class="variable">$infos</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/cloning-folder-structures-with-ntfs-permissions-part-2" target="_blank" rel="external">Cloning Folder Structures (with NTFS Permissions) – Part 2</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Cloning Folder Structures (with NTFS Permissions) – Part 2
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 克隆文件夹结构（含 NTFS 权限） – 第一部分</title>
    <link href="http://blog.vichamp.com/2017/04/27/cloning-folder-structures-with-ntfs-permissions-part-1/"/>
    <id>http://blog.vichamp.com/2017/04/27/cloning-folder-structures-with-ntfs-permissions-part-1/</id>
    <published>2017-04-26T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.848Z</updated>
    
    <content type="html"><![CDATA[<p>有些时候您需要重新创建一个嵌套的文件夹结构，并且希望克隆 NTFS 权限。今天我们我们专注第一个步骤：记录一个已有的文件夹结构，包括 SDDL 格式的 NTFS 权限。</p>
<p>我们可以用 <code>Get-FolderStructureWithPermission</code> 函数实现这个任务。它输入一个已存在文件夹的路径，并返回所有子文件夹，包括 SDDL 格式的 NTFS 权限：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Get-FolderStructureWithPermission</div><div class="line">&#123;</div><div class="line">  <span class="keyword">param</span></div><div class="line">  (</div><div class="line">    [String]</div><div class="line">    [Parameter(Mandatory)]</div><div class="line">    <span class="variable">$Path</span></div><div class="line">  )</div><div class="line"></div><div class="line">  <span class="keyword">if</span> ((<span class="built_in">Test-Path</span> -Path <span class="variable">$Path</span> -PathType Container) <span class="nomarkup">-eq</span> <span class="literal">$false</span>)</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="string">"<span class="variable">$Path</span> does not exist or is no directory!"</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">Get-ChildItem</span> -Path <span class="variable">$Path</span> -Recurse -Directory |</div><div class="line">  <span class="built_in">ForEach-Object</span> &#123;</div><div class="line">    <span class="variable">$sd</span> = <span class="built_in">Get-Acl</span> -Path <span class="variable">$_</span>.FullName</div><div class="line">    <span class="variable">$sddl</span> = <span class="variable">$sd</span>.GetSecurityDescriptorSddlForm(<span class="string">'all'</span>)</div><div class="line"></div><div class="line"></div><div class="line">    [PSCustomObject]@&#123;</div><div class="line">      Path = <span class="variable">$_</span>.FullName.Substring(<span class="variable">$Path</span>.Length)</div><div class="line">      SDDL = <span class="variable">$sddl</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>您可以将结果通过管道输出到 <code>Out-GridView</code>，或将它保存到一个变量，或用 <code>Export-Csv</code> 将它写到磁盘中。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; Get-FolderStructureWithPermission -Path <span class="variable">$home</span> | <span class="built_in">Format-List</span></div><div class="line"></div><div class="line"></div><div class="line">Path : \.dnx</div><div class="line">SDDL : O:S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">2012478179</span>-<span class="number">265285931</span>-<span class="number">690539891</span>-<span class="number">1001</span>G:S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">2012478179</span>-<span class="number">265285931</span>-<span class="number">690539891</span>-<span class="number">1001</span>D:(A;OICIID;FA;;;SY)(A;OI</div><div class="line">        CIID;FA;;;BA)(A;OICIID;FA;;;S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">2012478179</span>-<span class="number">265285931</span>-<span class="number">690539891</span>-<span class="number">1001</span>)</div><div class="line"></div><div class="line">Path : \.plaster</div><div class="line">SDDL : O:S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">2012478179</span>-<span class="number">265285931</span>-<span class="number">690539891</span>-<span class="number">1001</span>G:S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">2012478179</span>-<span class="number">265285931</span>-<span class="number">690539891</span>-<span class="number">1001</span>D:(A;OICIID;FA;;;SY)(A;OI</div><div class="line">        CIID;FA;;;BA)(A;OICIID;FA;;;S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">2012478179</span>-<span class="number">265285931</span>-<span class="number">690539891</span>-<span class="number">1001</span>)</div><div class="line"></div><div class="line">Path : \.vscode</div><div class="line">SDDL : O:S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">2012478179</span>-<span class="number">265285931</span>-<span class="number">690539891</span>-<span class="number">1001</span>G:S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">2012478179</span>-<span class="number">265285931</span>-<span class="number">690539891</span>-<span class="number">1001</span>D:(A;OICIID;FA;;;SY)(A;OI</div><div class="line">        CIID;FA;;;BA)(A;OICIID;FA;;;S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">2012478179</span>-<span class="number">265285931</span>-<span class="number">690539891</span>-<span class="number">1001</span>)</div><div class="line"></div><div class="line">Path : \.vscode-insiders</div><div class="line">SDDL : O:S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">2012478179</span>-<span class="number">265285931</span>-<span class="number">690539891</span>-<span class="number">1001</span>G:S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">2012478179</span>-<span class="number">265285931</span>-<span class="number">690539891</span>-<span class="number">1001</span>D:(A;OICIID;FA;;;SY)(A;OI</div><div class="line">        CIID;FA;;;BA)(A;OICIID;FA;;;S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">2012478179</span>-<span class="number">265285931</span>-<span class="number">690539891</span>-<span class="number">1001</span>)</div><div class="line"></div><div class="line">Path : \<span class="number">3</span>D Objects</div><div class="line">SDDL : O:S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">2012478179</span>-<span class="number">265285931</span>-<span class="number">690539891</span>-<span class="number">1001</span>G:S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">2012478179</span>-<span class="number">265285931</span>-<span class="number">690539891</span>-<span class="number">1001</span>D:(A;OICIID;FA;;;SY)(A;OI</div><div class="line">        CIID;FA;;;BA)(A;OICIID;FA;;;S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">2012478179</span>-<span class="number">265285931</span>-<span class="number">690539891</span>-<span class="number">1001</span>)</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>免责声明：这里呈现的所有代码仅供学习使用。由于我们没有投入大量精力去测试它，所以没有任何保障，而且它并不是生产准备就绪的代码。您有责任对这段代码进行测试，并决定它是否完美符合您的需要。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/cloning-folder-structures-with-ntfs-permissions-part-1" target="_blank" rel="external">Cloning Folder Structures (with NTFS Permissions) – Part 1</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Cloning Folder Structures (with NTFS Permissions) – Part 1
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 评估 Exit Code（也叫做 Error Level – 第三部分）</title>
    <link href="http://blog.vichamp.com/2017/04/26/evaluating-exit-codes-aka-error-level-part-3/"/>
    <id>http://blog.vichamp.com/2017/04/26/evaluating-exit-codes-aka-error-level-part-3/</id>
    <published>2017-04-25T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.847Z</updated>
    
    <content type="html"><![CDATA[<p>在 PowerShell 中运行控制台应用程序的迷你系列的第三部分中，有一个小课题：如何独立于 PowerShell 运行一个控制台应用程序，并且当它执行完成后得到通知，并且获取它的 exit code？</p>
<p>以下是实现方法：以下代码在一个独立（隐藏）的窗口中运行 ping.exe。PowerShell 继续运行并且可以执行任何其它操作。在这个例子中，它在 ping.exe 正忙于 ping 一个主机名的同时打出一系列“点”号。</p>
<p>当 exe 执行完成时，这段代码能获取进程的 ExitCode 信息：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hostname</span> = <span class="string">'powershellmagazine.com'</span></div><div class="line"><span class="comment"># run the console-based application ASYNCHRONOUSLY in its own</span></div><div class="line"><span class="comment"># window (PowerShell continues) and return the</span></div><div class="line"><span class="comment"># process object (-PassThru)</span></div><div class="line"><span class="comment"># Hide the new window (you can also show it if you want)</span></div><div class="line"><span class="variable">$process</span> = <span class="built_in">Start-Process</span> -FilePath ping -ArgumentList <span class="string">"<span class="variable">$hostname</span> -n 4 -w 2000"</span> -WindowStyle Hidden -PassThru</div><div class="line"></div><div class="line"><span class="comment"># wait for the process to complete, and meanwhile</span></div><div class="line"><span class="comment"># display some dots to indicate progress:</span></div><div class="line"><span class="keyword">do</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">Write-Host</span> <span class="string">'.'</span> -NoNewline</div><div class="line">    <span class="built_in">Start-Sleep</span> -Milliseconds <span class="number">300</span></div><div class="line">&#125; <span class="keyword">until</span> (<span class="variable">$process</span>.HasExited)</div><div class="line"><span class="built_in">Write-Host</span></div><div class="line"></div><div class="line"><span class="comment"># the Error Level information is then found in ExitCode:</span></div><div class="line"><span class="variable">$IsOnline</span> = <span class="variable">$process</span>.ExitCode <span class="nomarkup">-eq</span> <span class="number">0</span></div><div class="line"><span class="variable">$IsOnline</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/evaluating-exit-codes-aka-error-level-part-3" target="_blank" rel="external">Evaluating Exit Codes (aka Error Level – Part 3)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Evaluating Exit Codes (aka Error Level – Part 3)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 评估 Exit Code（也叫做 Error Level – 第二部分）</title>
    <link href="http://blog.vichamp.com/2017/04/25/evaluating-exit-codes-aka-error-level-part-2/"/>
    <id>http://blog.vichamp.com/2017/04/25/evaluating-exit-codes-aka-error-level-part-2/</id>
    <published>2017-04-24T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.841Z</updated>
    
    <content type="html"><![CDATA[<p>当您直接启动一个控制台应用程序时，PowerShell 会返回它的 exit code（也叫做 Error Level），并存储在 <code>$LASTEXITCODE</code> 变量中。然而，如何获取通过 <code>Start-Process</code> 启动的控制台应用程序的 exit code 呢？</p>
<p>以下是方法：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hostname</span> = <span class="string">'powershellmagazine.com'</span></div><div class="line"><span class="comment"># run the console-based application synchronously in the PowerShell window, </span></div><div class="line"><span class="comment"># and return the process object (-PassThru)</span></div><div class="line"><span class="variable">$process</span> = <span class="built_in">Start-Process</span> -FilePath ping -ArgumentList <span class="string">"<span class="variable">$hostname</span> -n 2 -w 2000"</span> -Wait -NoNewWindow -PassThru</div><div class="line"></div><div class="line"><span class="comment"># the Error Level information is then found in ExitCode:</span></div><div class="line"><span class="variable">$IsOnline</span> = <span class="variable">$process</span>.ExitCode <span class="nomarkup">-eq</span> <span class="number">0</span></div><div class="line"><span class="variable">$IsOnline</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/evaluating-exit-codes-aka-error-level-part-2" target="_blank" rel="external">Evaluating Exit Codes (aka Error Level – Part 2)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Evaluating Exit Codes (aka Error Level – Part 2)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 评估 Exit Code（也叫做 Error Level – 第一部分）</title>
    <link href="http://blog.vichamp.com/2017/04/24/evaluating-exit-codes-aka-error-level-part-1/"/>
    <id>http://blog.vichamp.com/2017/04/24/evaluating-exit-codes-aka-error-level-part-1/</id>
    <published>2017-04-23T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.836Z</updated>
    
    <content type="html"><![CDATA[<p>当运行一个控制台应用程序时，它通常会返回一个数字型的 exit code。该 exit code 的含义取决于控制台应用程序，要查询应用程序才能理解 exit code 的含义。PowerShell 也会将 exit code 传递给用户。它通过 <code>$LASTEXITCODE</code> 体现。</p>
<p>以下是一个使用 ping.exe 来测试网络响应的例子：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hostname</span> = <span class="string">'powershellmagazine.com'</span></div><div class="line"><span class="comment"># run console-based executable directly</span></div><div class="line"><span class="comment"># and disregard text results</span></div><div class="line"><span class="literal">$null</span> = ping.exe <span class="variable">$hostname</span> -n <span class="number">2</span> -w <span class="number">2000</span></div><div class="line"><span class="comment"># instead look at the exit code delivered in</span></div><div class="line"><span class="comment"># $LASTEXITCODE. Ping.exe returns 0 if a </span></div><div class="line"><span class="comment"># response was received:</span></div><div class="line"><span class="variable">$IsOnline</span> = <span class="variable">$LASTEXITCODE</span> <span class="nomarkup">-eq</span> <span class="number">0</span></div><div class="line"><span class="variable">$IsOnline</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/evaluating-exit-codes-aka-error-level-part-1" target="_blank" rel="external">Evaluating Exit Codes (aka Error Level – Part 1)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Evaluating Exit Codes (aka Error Level – Part 1)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 弹出 CD 驱动器</title>
    <link href="http://blog.vichamp.com/2017/04/21/ejecting-cd-drive/"/>
    <id>http://blog.vichamp.com/2017/04/21/ejecting-cd-drive/</id>
    <published>2017-04-20T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.829Z</updated>
    
    <content type="html"><![CDATA[<p>以下是一个用 WMI 弹出 CD 驱动器的小函数。它首先向 WMI 请求所有的 CD 驱动器，然后使用 explorer 对象模型导航到该驱动器并调用它的 “Eject” 上下文菜单项。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Eject-CD</div><div class="line">&#123;</div><div class="line">  <span class="variable">$drives</span> = <span class="built_in">Get-WmiObject</span> Win32_Volume -Filter <span class="string">"DriveType=5"</span></div><div class="line">  <span class="keyword">if</span> (<span class="variable">$drives</span> <span class="nomarkup">-eq</span> <span class="literal">$null</span>)</div><div class="line">  &#123;</div><div class="line">    <span class="built_in">Write-Warning</span> <span class="string">"Your computer has no CD drives to eject."</span></div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  <span class="variable">$drives</span> | <span class="built_in">ForEach-Object</span> &#123;</div><div class="line">    (<span class="built_in">New-Object</span> -ComObject Shell.Application).Namespace(<span class="number">17</span>).ParseName(<span class="variable">$_</span>.Name).InvokeVerb(<span class="string">"Eject"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Eject-CD</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/ejecting-cd-drive" target="_blank" rel="external">Ejecting CD Drive</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Ejecting CD Drive
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 检测 CSV 的分隔符</title>
    <link href="http://blog.vichamp.com/2017/04/20/identifying-csv-delimiter/"/>
    <id>http://blog.vichamp.com/2017/04/20/identifying-csv-delimiter/</id>
    <published>2017-04-19T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.824Z</updated>
    
    <content type="html"><![CDATA[<p>当使用 <code>Import-Csv</code> 导入一个 CSV 文件，需要指定一个分隔符。如果用错了，显然会导入失败。您需要事先知道 CSV 文件使用的分隔符。</p>
<p>以下是一个简单的实践，展示了如何判断一个给定的 CSV 文件的分隔符：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Get-CsvDelimiter(<span class="variable">$Path</span>)</div><div class="line">&#123;</div><div class="line">    <span class="comment"># get the header line</span></div><div class="line">    <span class="variable">$headerLine</span> = <span class="built_in">Get-Content</span> <span class="variable">$Path</span> | <span class="built_in">Select-Object</span> -First <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="comment"># examine header line per character</span></div><div class="line">    <span class="variable">$headerline</span>.ToCharArray() |</div><div class="line">        <span class="comment"># find all non-alphanumeric characters</span></div><div class="line">        <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span> <span class="nomarkup">-notlike</span> <span class="string">'[a-z0-9äöüß"()]'</span> &#125; |</div><div class="line">        <span class="comment"># find the one that occurs most often</span></div><div class="line">        <span class="built_in">Group-Object</span> -NoElement |</div><div class="line">        <span class="built_in">Sort-Object</span> -Descending -Property Count |</div><div class="line">        <span class="comment"># return it</span></div><div class="line">        <span class="built_in">Select-Object</span> -First <span class="number">1</span> -ExpandProperty Name</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下是一个测试：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="built_in">Get-Date</span> | <span class="built_in">Export-Csv</span> -Path <span class="variable">$env:temp</span>\test.csv -NoTypeInformation</div><div class="line"></div><div class="line">PS&gt; Get-CsvDelimiter -Path <span class="variable">$env:temp</span>\test.csv</div><div class="line">,</div><div class="line"></div><div class="line">PS&gt; <span class="built_in">Get-Date</span> | <span class="built_in">Export-Csv</span> -Path <span class="variable">$env:temp</span>\test.csv -NoTypeInformation -UseCulture</div><div class="line"></div><div class="line">PS&gt; Get-CsvDelimiter -Path <span class="variable">$env:temp</span>\test.csv</div><div class="line">;</div><div class="line"></div><div class="line">PS&gt; <span class="built_in">Get-Date</span> | <span class="built_in">Export-Csv</span> -Path <span class="variable">$env:temp</span>\test.csv -NoTypeInformation -Delimiter <span class="string">'#'</span></div><div class="line"></div><div class="line">PS&gt; Get-CsvDelimiter -Path <span class="variable">$env:temp</span>\test.csv</div><div class="line"><span class="comment">#</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/identifying-csv-delimiter" target="_blank" rel="external">Identifying CSV Delimiter</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Identifying CSV Delimiter
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 确认重复的 CSV 表头（第二部分）</title>
    <link href="http://blog.vichamp.com/2017/04/19/identifying-duplicate-csv-headers-part-2/"/>
    <id>http://blog.vichamp.com/2017/04/19/identifying-duplicate-csv-headers-part-2/</id>
    <published>2017-04-18T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.814Z</updated>
    
    <content type="html"><![CDATA[<p>当一个 CSV 文件包含重复的表头时，它无法被导入。在前一个技能中我们掩饰了如何检测一个 CSV 文件中重复的表头。以下是一个自动更正重复项的实践。</p>
<p>第一步，您需要一个包含重复表头的 CSV 文件。例如在德文系统中，您可以这样创建一个文件：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; driverquery /V /FO CSV | <span class="built_in">Set-Content</span> -Path <span class="variable">$env:temp</span>\test.csv -Encoding UTF8</div></pre></td></tr></table></figure>
<p>快速打开该文件并检查它是否确实包含重复项。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; notepad <span class="variable">$env:temp</span>\test.csv</div></pre></td></tr></table></figure>
<p>如果没有重复项，请将某些表头重命名以制造一些重复项，并保存文件。</p>
<p>您现在可以用 <code>Import-Csv</code> 导入 CSV 文件了：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt;  <span class="built_in">Import-Csv</span> -Path <span class="variable">$env:temp</span>\test.csv -Delimiter <span class="string">','</span></div><div class="line"><span class="built_in">Import-Csv</span> : Element  <span class="string">"Status"</span> is present already.</div><div class="line"><span class="keyword">In</span> Zeile:<span class="number">1</span> Zeichen:<span class="number">1</span></div><div class="line">+ <span class="built_in">Import-Csv</span> -Path <span class="variable">$env:temp</span>\test.csv  -Delimiter <span class="string">','</span></div><div class="line">+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line">    +  CategoryInfo          : NotSpecified: (:)  [Import-Csv], ExtendedTypeSystemException</div><div class="line">    +  FullyQualifiedErrorId :  AlreadyPresentPSMemberInfoInternalCollectionAdd,Microsoft.PowerShell.Commands.ImportCsvCommand</div></pre></td></tr></table></figure>
<p>这是一个新的名为 <code>Import-CsvWithoutDuplicate</code> 的函数，可以自动处理重复的项：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Import-CsvWithDuplicate(<span class="variable">$Path</span>, <span class="variable">$Delimiter</span>=<span class="string">','</span>, <span class="variable">$Encoding</span>=<span class="string">'UTF8'</span>)</div><div class="line">&#123;</div><div class="line">    <span class="comment"># get the header line and all header items</span></div><div class="line">    <span class="variable">$headerLine</span> = <span class="built_in">Get-Content</span> <span class="variable">$Path</span> | <span class="built_in">Select-Object</span> -First <span class="number">1</span></div><div class="line">    <span class="variable">$headers</span> = <span class="variable">$headerLine</span>.Split(<span class="variable">$Delimiter</span>)</div><div class="line"></div><div class="line">    <span class="comment"># check for duplicate header names, and if found, add an incremented</span></div><div class="line">    <span class="comment"># number to it</span></div><div class="line">    <span class="variable">$dupDict</span> = @&#123;&#125;</div><div class="line">    <span class="variable">$newHeaders</span> = @(<span class="keyword">foreach</span>(<span class="variable">$header</span> <span class="keyword">in</span> <span class="variable">$headers</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="variable">$incrementor</span> = <span class="number">1</span></div><div class="line">        <span class="variable">$header</span> = <span class="variable">$header</span>.Trim(<span class="string">'"'</span>)</div><div class="line">        <span class="variable">$newheader</span> = <span class="variable">$header</span></div><div class="line"></div><div class="line">        <span class="comment"># increment numbers until the new name is unique</span></div><div class="line">        <span class="keyword">while</span> (<span class="variable">$dupDict</span>.ContainsKey(<span class="variable">$newheader</span>) <span class="nomarkup">-eq</span> <span class="literal">$true</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="variable">$newheader</span> = <span class="string">"<span class="variable">$header</span><span class="variable">$incrementor</span>"</span></div><div class="line">            <span class="variable">$incrementor</span>++</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="variable">$dupDict</span>.Add(<span class="variable">$newheader</span>, <span class="variable">$header</span>)</div><div class="line"></div><div class="line">        <span class="comment"># return the new header, producing a string array</span></div><div class="line">        <span class="variable">$newheader</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment"># read the CSV without its own headers..</span></div><div class="line">    <span class="built_in">Get-Content</span> -Path <span class="variable">$Path</span> -Encoding <span class="variable">$Encoding</span> |</div><div class="line">        <span class="built_in">Select-Object</span> -Skip <span class="number">1</span> |</div><div class="line">        <span class="comment"># ..and replace headers with newly created list</span></div><div class="line">        <span class="built_in">ConvertFrom-CSV</span> -Delimiter <span class="variable">$Delimiter</span> -Header <span class="variable">$newHeaders</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过它，您可以安全地导入 CSV 文件，不会遇到重复的表头：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; Import-CsvWithDuplicate -Path <span class="variable">$env:temp</span>\test.csv -Delimiter <span class="string">','</span></div><div class="line"></div><div class="line"></div><div class="line">Modulname                  : <span class="number">1394</span>ohci</div><div class="line">Anzeigename                : OHCI-konformer <span class="number">1394</span>-Hostcontroller</div><div class="line">Beschreibung               : OHCI-konformer <span class="number">1394</span>-Hostcontroller</div><div class="line">Treibertyp                 : Kernel</div><div class="line">Startmodus                 : Manual</div><div class="line">Status                     : Stopped</div><div class="line">Status1                    : OK</div><div class="line">Beenden annehmen           : FALSE</div><div class="line">Anhalten annehmen          : FALSE</div><div class="line">Ausgelagerter Pool (Bytes) : <span class="number">4.096</span></div><div class="line">Code(Bytes)                : <span class="number">204.800</span></div><div class="line">BSS(Bytes)                 : <span class="number">0</span></div><div class="line">Linkdatum                  : <span class="number">16.07</span>.<span class="number">2016</span> <span class="number">04</span>:<span class="number">21</span>:<span class="number">36</span></div><div class="line">Pfad                       : C:\WINDOWS\system32\drivers\<span class="number">1394</span>ohci.sys</div><div class="line">Init(Bytes)                : <span class="number">4.096</span></div><div class="line"></div><div class="line">Modulname                  : <span class="number">3</span>ware</div><div class="line">Anzeigename                : <span class="number">3</span>ware</div><div class="line">Beschreibung               : <span class="number">3</span>ware</div><div class="line">Treibertyp                 : Kernel</div><div class="line">Startmodus                 : Manual</div><div class="line">Status                     : Stopped</div><div class="line">Status1                    : OK</div><div class="line">Beenden annehmen           : FALSE</div><div class="line">Anhalten annehmen          : FALSE</div><div class="line">Ausgelagerter Pool (Bytes) : <span class="number">0</span></div><div class="line">(...)</div></pre></td></tr></table></figure>
<p>如您所见，这个函数自动将第二个 “Status” 实例重命名为 “Status1”。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/identifying-duplicate-csv-headers-part-2" target="_blank" rel="external">Identifying Duplicate CSV Headers (Part 2)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Identifying Duplicate CSV Headers (Part 2)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 确认重复的 CSV 表头（第一部分）</title>
    <link href="http://blog.vichamp.com/2017/04/18/identifying-duplicate-csv-headers-part-1/"/>
    <id>http://blog.vichamp.com/2017/04/18/identifying-duplicate-csv-headers-part-1/</id>
    <published>2017-04-17T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.808Z</updated>
    
    <content type="html"><![CDATA[<p>CSV 文件只是文本文件，所以可以很容易地提取它的第一行并检查它的表头。如果您手头没有一个 CSV 文件，这行代码可以快速帮您创建一个：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; <span class="built_in">Get-Process</span> | <span class="built_in">Export-Csv</span> -Path <span class="variable">$env:temp</span>\test.csv -NoTypeInformation -Encoding UTF8 -UseCulture</div><div class="line"></div><div class="line">PS C:\&gt;</div></pre></td></tr></table></figure>
<p>现在您可以分析它的表头。这个简单的方法告诉您 CSV 文件中是否有重复的标题（在这个例子中显然不存在）。这段代码假设您的 CSV 文件分隔符是逗号。如果使用一个不同的分隔符，请调整用于分割的字符：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$headers</span> = <span class="built_in">Get-Content</span> <span class="variable">$env:temp</span>\test.csv | <span class="built_in">Select-Object</span> -First <span class="number">1</span></div><div class="line"><span class="variable">$duplicates</span> = <span class="variable">$headers</span>.Split(<span class="string">','</span>) | <span class="built_in">Group-Object</span> -NoElement | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.Count <span class="nomarkup">-ge</span> <span class="number">2</span>&#125;</div><div class="line"><span class="keyword">if</span> (<span class="variable">$duplicates</span>.Count <span class="nomarkup">-eq</span> <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">Write-Host</span> <span class="string">'You are safe!'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">Write-Warning</span> <span class="string">'There are duplicate columns in your CSV file:'</span></div><div class="line">    <span class="variable">$duplicates</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如预想的：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">You are safe!</div><div class="line"></div><div class="line">PS C:\&gt;</div></pre></td></tr></table></figure>
<p>如果您好奇当遇到重复的标题时会如何失败，请试试这段代码：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; driverquery /V /FO CSV | <span class="built_in">Set-Content</span> -Path <span class="variable">$env:temp</span>\test.csv -Encoding UTF8</div></pre></td></tr></table></figure>
<p>如果您在一个的文系统中运行这段代码，结果将会类似这样：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">WARNUNG: There are  duplicate columns <span class="keyword">in</span> your CSV file:</div><div class="line"></div><div class="line">Count Name</div><div class="line">----- ----</div><div class="line">    <span class="number">2</span>  <span class="string">"Status"</span></div></pre></td></tr></table></figure>
<p>显然，在本地化时，Microsoft 将 “State” 和 “Status” 两个单词都翻译成了德文的 “Status”，造成了重复的列标题。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/identifying-duplicate-csv-headers-part-1" target="_blank" rel="external">Identifying Duplicate CSV Headers (Part 1)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Identifying Duplicate CSV Headers (Part 1)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 用区域性固定的方式序列化日期和时间</title>
    <link href="http://blog.vichamp.com/2017/04/17/serializing-date-and-time-in-a-culture-invariant-way/"/>
    <id>http://blog.vichamp.com/2017/04/17/serializing-date-and-time-in-a-culture-invariant-way/</id>
    <published>2017-04-16T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.802Z</updated>
    
    <content type="html"><![CDATA[<p>当您保存日期和时间到文本中时，例如导出到 CSV 时，或创建文本报告时，<code>DateTime</code> 对象将会按照您的区域设置转换为相应的日期和时间格式：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="variable">$date</span> = <span class="built_in">Get-Date</span> -Date <span class="string">'2017-02-03 19:22:11'</span></div><div class="line"></div><div class="line">PS&gt; <span class="string">"<span class="variable">$date</span>"</span></div><div class="line"><span class="number">02</span>/<span class="number">03</span>/<span class="number">2017</span> <span class="number">19</span>:<span class="number">22</span>:<span class="number">11</span></div><div class="line"></div><div class="line">PS&gt; <span class="variable">$date</span>.ToString()</div><div class="line"><span class="number">03.02</span>.<span class="number">2017</span> <span class="number">19</span>:<span class="number">22</span>:<span class="number">11</span></div><div class="line"></div><div class="line">PS&gt; <span class="built_in">Get-Date</span> -Date <span class="variable">$date</span> -DisplayHint DateTime</div><div class="line"></div><div class="line">Freitag, <span class="number">3</span>. Februar <span class="number">2017</span> <span class="number">19</span>:<span class="number">22</span>:<span class="number">11</span></div></pre></td></tr></table></figure>
<p>这些都是和区域有关的格式，所以当其他人打开您的数据，将它转换为真实的日期时间可能会失败。这就是为什么推荐将日期时间信息保存为文本时将它转换为区域无关的 ISO 格式：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="built_in">Get-Date</span> -Date <span class="variable">$date</span> -Format <span class="string">'yyyy-MM-dd HH:mm:ss'</span></div><div class="line"><span class="number">2017</span>-<span class="number">02</span>-<span class="number">03</span> <span class="number">19</span>:<span class="number">22</span>:<span class="number">11</span></div><div class="line"></div><div class="line">PS&gt;</div></pre></td></tr></table></figure>
<p>该 ISO 格式重视能正确地转回 <code>DateTime</code> 对象，无论您的机器用的是什么语言：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PS&gt; [DateTime]<span class="string">'2017-02-03 19:22:11'</span></div><div class="line"></div><div class="line">Friday, February <span class="number">3</span>, <span class="number">2017</span> <span class="number">19</span>:<span class="number">22</span>:<span class="number">11</span></div></pre></td></tr></table></figure>
<p>另外，这种设计保证它们在使用字母排序时顺序是正确的。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/serializing-date-and-time-in-a-culture-invariant-way" target="_blank" rel="external">Serializing Date and Time in a Culture-Invariant Way</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Serializing Date and Time in a Culture-Invariant Way
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 将时钟周期转换为日期和时间（第二部分）</title>
    <link href="http://blog.vichamp.com/2017/04/14/converting-ticks-to-date-and-time-part-2/"/>
    <id>http://blog.vichamp.com/2017/04/14/converting-ticks-to-date-and-time-part-2/</id>
    <published>2017-04-13T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.800Z</updated>
    
    <content type="html"><![CDATA[<p>在前一个技能中我们解释了如何将用时钟周期数表达的日期时间转换为真实的 <code>DateTime</code> 格式。然而，现实中有两种不同的时钟周期格式，以下是如何转换数字型日期时间信息的概述：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="variable">$date</span> = <span class="built_in">Get-Date</span> -Date <span class="string">'2017-02-03 19:22:11'</span></div><div class="line">PS&gt; <span class="variable">$ticks</span> = <span class="variable">$date</span>.Ticks</div><div class="line">PS&gt; <span class="variable">$ticks</span></div><div class="line"><span class="number">636217465310000000</span></div><div class="line"></div><div class="line">PS&gt; [DateTime]<span class="variable">$ticks</span></div><div class="line">Friday, February <span class="number">3</span>, <span class="number">2017</span> <span class="number">19</span>:<span class="number">22</span>:<span class="number">11</span></div><div class="line"></div><div class="line">PS&gt; [DateTime]::FromBinary(<span class="variable">$ticks</span>)</div><div class="line">Friday, February <span class="number">3</span>, <span class="number">2017</span> <span class="number">19</span>:<span class="number">22</span>:<span class="number">11</span></div><div class="line"></div><div class="line">PS&gt; [DateTime]::FromFileTime(<span class="variable">$ticks</span>)</div><div class="line">Friday, February <span class="number">3</span>, <span class="number">3617</span> <span class="number">20</span>:<span class="number">22</span>:<span class="number">11</span></div><div class="line"></div><div class="line">PS&gt; [DateTime]::FromFileTimeUtc(<span class="variable">$ticks</span>)</div><div class="line">Friday, February <span class="number">3</span>, <span class="number">3617</span> <span class="number">19</span>:<span class="number">22</span>:<span class="number">11</span></div></pre></td></tr></table></figure>
<p>如您所见，将时钟周期转换为 <code>DateTime</code> 和执行 <code>FromBinary()</code> 静态方法的效果是一样的。但是 <code>FromeFileTime()</code> 做了什么？它似乎把你发送到了遥远的将来。</p>
<p>这个例子显示了到底发生了什么：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="variable">$date1</span> = [DateTime]::FromBinary(<span class="variable">$ticks</span>)</div><div class="line">PS&gt; <span class="variable">$date2</span> = [DateTime]::FromFileTime(<span class="variable">$ticks</span>)</div><div class="line">PS&gt; <span class="variable">$date2</span> - <span class="variable">$date1</span></div><div class="line"></div><div class="line">Days              : <span class="number">584388</span></div><div class="line">Hours             : <span class="number">1</span></div><div class="line">Minutes           : <span class="number">0</span></div><div class="line">Seconds           : <span class="number">0</span></div><div class="line">Milliseconds      : <span class="number">0</span></div><div class="line">Ticks             : <span class="number">504911268000000000</span></div><div class="line">TotalDays         : <span class="number">584388</span>,<span class="number">041666667</span></div><div class="line">TotalHours        : <span class="number">14025313</span></div><div class="line">TotalMinutes      : <span class="number">841518780</span></div><div class="line">TotalSeconds      : <span class="number">50491126800</span></div><div class="line">TotalMilliseconds : <span class="number">50491126800000</span></div><div class="line"></div><div class="line">PS&gt; (<span class="variable">$date2</span> - <span class="variable">$date1</span>).Days / <span class="number">365.25</span></div><div class="line"><span class="number">1599</span>,<span class="number">96714579055</span></div></pre></td></tr></table></figure>
<p><code>FromeFileTime()</code> 只是增加了 1601 年（因为闰年，实际计算结果略有出入）。Windows 的某些部分（例如 Active Directory）从 1601 年 1 月 1 日开始计算日期。对于这些情况，请使用 <code>FromeFileTime()</code> 来获取正确的日期时间。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/converting-ticks-to-date-and-time-part-2" target="_blank" rel="external">Converting Ticks to Date and Time (Part 2)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Converting Ticks to Date and Time (Part 2)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 将时钟周期转换为日期和时间（第一部分）</title>
    <link href="http://blog.vichamp.com/2017/04/13/converting-ticks-to-date-and-time-part-1/"/>
    <id>http://blog.vichamp.com/2017/04/13/converting-ticks-to-date-and-time-part-1/</id>
    <published>2017-04-12T16:00:00.000Z</published>
    <updated>2017-05-11T01:41:38.791Z</updated>
    
    <content type="html"><![CDATA[<p>有时候您可能会遇到一些奇怪的日期和时间格式，它们可能用的是类似这样的 64 位 integer 数值：636264671350358729。</p>
<p>如果您想将这样的“时钟周期”（Windows 中最小的时间片），只需要将数字转换为 <code>DateTime</code> 类型：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PS&gt; [DateTime]<span class="number">636264671350358729</span></div><div class="line"></div><div class="line">Thursday, March <span class="number">30</span>, <span class="number">2017</span> <span class="number">10</span>:<span class="number">38</span>:<span class="number">55</span></div></pre></td></tr></table></figure>
<p>类似地，要将一个日期转换为时钟周期，请试试这段代码：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PS&gt; <span class="variable">$date</span> = <span class="built_in">Get-Date</span> -Date <span class="string">'2017-02-03 19:22:11'</span></div><div class="line"></div><div class="line">PS&gt; <span class="variable">$date</span>.Ticks</div><div class="line"><span class="number">636217465310000000</span></div></pre></td></tr></table></figure>
<p>比如说，您可以利用这个时钟周期来将日期和时间序列化成非特定区域的格式。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/converting-ticks-to-date-and-time-part-1" target="_blank" rel="external">Converting Ticks to Date and Time (Part 1)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Converting Ticks to Date and Time (Part 1)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
</feed>
