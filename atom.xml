<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>叹为观止</title>
  <subtitle>追求卓越，成功自然来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.vichamp.com/"/>
  <updated>2017-04-10T02:23:56.546Z</updated>
  <id>http://blog.vichamp.com/</id>
  
  <author>
    <name>John Doe</name>
    <email>victorwoo@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PowerShell 技能连载 - 处理长文件路径</title>
    <link href="http://blog.vichamp.com/2017/04/07/dealing-with-long-file-paths/"/>
    <id>http://blog.vichamp.com/2017/04/07/dealing-with-long-file-paths/</id>
    <published>2017-04-06T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.546Z</updated>
    
    <content type="html"><![CDATA[<p>以前，当路径长于 256 字符时，Windows 文件系统有时会变得缓慢。在 PowerShell Gallery 有一个 module，增加了一系列 cmdlet，可以快速搜索文件系统，并且支持任意长度的路径。</p>
<p>如果您使用 PowerShell 5 或安装了 PowerShellGet(<a href="http://www.powershellgallery.com" target="_blank" rel="external">www.powershellgallery.com</a>)，那么您可以从 PowerShell Gallery 中下载和安装 “PSAlphaFS” module：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Install-Module -Name PSAlphaFS -Scope CurrentUser</div></pre></td></tr></table></figure>
<p>不幸的是，这些 cmdlet 似乎需要完整的管理员特权，而对普通用户会抛出异常。如果您是管理员，您可以以这种方式查找长路径的文件：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Get-LongChildItem -Path c:\windows -Recurse -File |</div><div class="line">    <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.FullName.Length <span class="nomarkup">-gt</span> <span class="number">250</span> &#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/dealing-with-long-file-paths" target="_blank" rel="external">Dealing with Long File Paths</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Dealing with Long File Paths
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 检测字符代码 0</title>
    <link href="http://blog.vichamp.com/2017/04/06/detecting-character-code-0/"/>
    <id>http://blog.vichamp.com/2017/04/06/detecting-character-code-0/</id>
    <published>2017-04-05T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.542Z</updated>
    
    <content type="html"><![CDATA[<p>有些时候，字符串适用 “<code>\0</code>“ 作为分隔符。不像其它大多数分隔符，这个分隔符并不显示在文本输出中，但仍然可以用于分割文本。</p>
<p>PowerShell 可以处理包含字符代码 0 的字符串。它用反斜杠后跟着数字 0 来表示。请注意文本需要放在双引号之内，才能将反斜杠序列转换为字节 0。</p>
<p>以下是一个演示如何分割 <code>\0</code> 分割的文本的例子：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># create a sample text</span></div><div class="line"><span class="variable">$text</span> = <span class="string">"Part 1`0Part 2`0Part 3"</span></div><div class="line"><span class="comment"># delimiter does not show in output...</span></div><div class="line"><span class="variable">$text</span> </div><div class="line"><span class="comment"># ...but can be used to split:</span></div><div class="line"><span class="variable">$text</span> -split <span class="string">"`0"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/detecting-character-code-0" target="_blank" rel="external">Detecting Character Code 0</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Detecting Character Code 0
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 自动定义函数的别名</title>
    <link href="http://blog.vichamp.com/2017/04/05/auto-declaring-alias-names-for-functions/"/>
    <id>http://blog.vichamp.com/2017/04/05/auto-declaring-alias-names-for-functions/</id>
    <published>2017-04-04T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.538Z</updated>
    
    <content type="html"><![CDATA[<p>您也许知道 PowerShell 支持命令的别名。但是您是否知道也可以在函数定义内部为 PowerShell 函数定义别名（PowerShell 4 引入的功能）呢？让我们来看看：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Get-AlcoholicBeverage</div><div class="line">&#123;</div><div class="line">    [Alias(<span class="string">'Beer'</span>,<span class="string">'Drink'</span>)]</div><div class="line">    [CmdletBinding()]</div><div class="line">    <span class="keyword">param</span>()</div><div class="line"></div><div class="line">    <span class="string">"Here is your beer."</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个函数的“正式”名称是 <code>Get-AlcoholicBeverage</code>，但是这个函数也可以通过 “<code>Beer</code>“ 和 “<code>Drink</code>“ 别名来引用。在函数定义时，PowerShell 自动增加了这些别名：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CommandType     Name</div><div class="line">-----------     ----</div><div class="line">Alias           Beer -&gt; Get-AlcoholicBeverage</div><div class="line">Alias           Drink -&gt; Get-AlcoholicBeverage</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/auto-declaring-alias-names-for-functions" target="_blank" rel="external">Auto-Declaring Alias Names for Functions</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Auto-Declaring Alias Names for Functions
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 检查操作系统版本</title>
    <link href="http://blog.vichamp.com/2017/04/04/checking-operating-system-version/"/>
    <id>http://blog.vichamp.com/2017/04/04/checking-operating-system-version/</id>
    <published>2017-04-03T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.534Z</updated>
    
    <content type="html"><![CDATA[<p>以下是一个简单快速的检查操作系统版本的方法：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; [Environment]::OSVersion</div><div class="line"></div><div class="line"></div><div class="line">Platform ServicePack Version      VersionString                    </div><div class="line">-------- ----------- -------      -------------                    </div><div class="line">    Win32NT             <span class="number">10.0</span>.<span class="number">14393.0</span> Microsoft Windows NT <span class="number">10.0</span>.<span class="number">14393.0</span></div></pre></td></tr></table></figure>
<p>所以要检查一个脚本是否运行在一个预定的操作系统上变得十分简单。例如要检查是否运行在 Windows 10 上，请试试这行代码：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; [Environment]::OSVersion.Version.Major <span class="nomarkup">-eq</span> <span class="number">10</span></div><div class="line"></div><div class="line">True</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/checking-operating-system-version" target="_blank" rel="external">Checking Operating System Version</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Checking Operating System Version
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 检查变量是否为 $NULL</title>
    <link href="http://blog.vichamp.com/2017/04/03/comparing-against-null/"/>
    <id>http://blog.vichamp.com/2017/04/03/comparing-against-null/</id>
    <published>2017-04-02T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.530Z</updated>
    
    <content type="html"><![CDATA[<p>如果您想检查一个变量是否为 <code>$Null</code>（空），请记住始终将 <code>$null</code> 放在比较运算符的左边。大多数情况下，顺序不重要：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; <span class="variable">$a</span> = <span class="literal">$null</span></div><div class="line"></div><div class="line">PS C:\&gt; <span class="variable">$b</span> = <span class="number">12</span></div><div class="line"></div><div class="line">PS C:\&gt; <span class="variable">$a</span> <span class="nomarkup">-eq</span> <span class="literal">$null</span></div><div class="line">True</div><div class="line"></div><div class="line">PS C:\&gt; <span class="variable">$b</span> <span class="nomarkup">-eq</span> <span class="literal">$null</span></div><div class="line">False</div></pre></td></tr></table></figure>
<p>然而，如果一个变量为一个数组，则将数组放在对比操作符左边的行为类似过滤器。这时候顺序变得很关键：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># this all produces inconsistent and fishy results</span></div><div class="line">    </div><div class="line"><span class="variable">$a</span> = <span class="literal">$null</span></div><div class="line"><span class="variable">$a</span> <span class="nomarkup">-eq</span> <span class="literal">$null</span>  <span class="comment"># works: returns $true</span></div><div class="line">    </div><div class="line"><span class="variable">$a</span> = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></div><div class="line"><span class="variable">$a</span> <span class="nomarkup">-eq</span> <span class="literal">$null</span>  <span class="comment"># fails: returns $null</span></div><div class="line">    </div><div class="line"><span class="variable">$a</span> = <span class="number">1</span>,<span class="number">2</span>,<span class="literal">$null</span>,<span class="number">3</span>,<span class="number">4</span></div><div class="line"><span class="variable">$a</span> <span class="nomarkup">-eq</span> <span class="literal">$null</span>  <span class="comment"># fails: returns $null</span></div><div class="line">    </div><div class="line"><span class="variable">$a</span> = <span class="number">1</span>,<span class="number">2</span>,<span class="literal">$null</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="literal">$null</span>,<span class="number">5</span></div><div class="line"><span class="variable">$a</span> <span class="nomarkup">-eq</span> <span class="literal">$null</span>  <span class="comment"># fails: returns array of 2x $null</span></div><div class="line">(<span class="variable">$a</span> <span class="nomarkup">-eq</span> <span class="literal">$null</span>).Count</div></pre></td></tr></table></figure>
<p>如果您将变量放在左侧，PowerShell 将检测数组内部的 <code>$null</code> 值，并且返回这些值。如果没有 <code>$null</code> 值，则返回 <code>$null</code>。</p>
<p>如果您将变量放在右侧，PowerShell 将检查变量是否为 <code>$null</code>。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># by reversing the operands, all is FINE:</span></div><div class="line">    </div><div class="line"><span class="variable">$a</span> = <span class="literal">$null</span></div><div class="line"><span class="literal">$null</span> <span class="nomarkup">-eq</span> <span class="variable">$a</span>  <span class="comment"># works: $true</span></div><div class="line">    </div><div class="line"><span class="variable">$a</span> = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></div><div class="line"><span class="literal">$null</span> <span class="nomarkup">-eq</span> <span class="variable">$a</span>  <span class="comment"># works: $false</span></div><div class="line">    </div><div class="line"><span class="variable">$a</span> = <span class="number">1</span>,<span class="number">2</span>,<span class="literal">$null</span>,<span class="number">3</span>,<span class="number">4</span></div><div class="line"><span class="literal">$null</span> <span class="nomarkup">-eq</span> <span class="variable">$a</span>  <span class="comment"># works: $false</span></div><div class="line">    </div><div class="line"><span class="variable">$a</span> = <span class="number">1</span>,<span class="number">2</span>,<span class="literal">$null</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="literal">$null</span>,<span class="number">5</span></div><div class="line"><span class="literal">$null</span> <span class="nomarkup">-eq</span> <span class="variable">$a</span>  <span class="comment"># works: $false</span></div></pre></td></tr></table></figure>
<p>可以将 <code>$null</code> 放在比较运算符的左侧而不是右侧，来消除这个问题。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/comparing-against-null" target="_blank" rel="external">Comparing Against $NULL</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Comparing Against $NULL
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 检查证书详细信息</title>
    <link href="http://blog.vichamp.com/2017/03/31/examining-certificate-details/"/>
    <id>http://blog.vichamp.com/2017/03/31/examining-certificate-details/</id>
    <published>2017-03-30T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.526Z</updated>
    
    <content type="html"><![CDATA[<p>如果您想检查和查看一个证书文件的详细信息而不需要将它导入证书存储空间，以下是一个简单的例子：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># replace path with actual path to CER file </span></div><div class="line"><span class="variable">$Path</span> = <span class="string">'C:\Path\To\CertificateFile\test.cer'</span></div><div class="line"></div><div class="line"><span class="built_in">Add-Type</span> -AssemblyName System.Security</div><div class="line">[Security.Cryptography.X509Certificates.X509Certificate2]<span class="variable">$cert</span> = [Security.Cryptography.X509Certificates.X509Certificate2]::CreateFromCertFile(<span class="variable">$Path</span>)</div><div class="line"></div><div class="line"><span class="variable">$cert</span> | <span class="built_in">Select-Object</span> -Property *</div></pre></td></tr></table></figure>
<p>您现在可以存取所有详细信息并获取指纹或检查失效日期：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; <span class="variable">$cert</span>.Thumbprint</div><div class="line"><span class="number">7</span>A5A350D95247BB173CDF0867ADA2DBFFCCABDE6</div><div class="line"></div><div class="line">PS C:\&gt; <span class="variable">$cert</span>.NotAfter</div><div class="line"></div><div class="line">Monday June <span class="number">12</span> <span class="number">2017</span> <span class="number">06</span>:<span class="number">00</span>:<span class="number">00</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/examining-certificate-details" target="_blank" rel="external">Examining Certificate Details</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Examining Certificate Details
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 到处 ActiveDirectory 模块</title>
    <link href="http://blog.vichamp.com/2017/03/30/exporting-activedirectory-module/"/>
    <id>http://blog.vichamp.com/2017/03/30/exporting-activedirectory-module/</id>
    <published>2017-03-29T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.522Z</updated>
    
    <content type="html"><![CDATA[<p>要在 PowerShell 中管理 Active Directory 的用户和计算机，您需要 Microsoft 提供的免费的 RSAT 工具中的 Active Directory 模块。</p>
<p>假设您是一个域管理员并且拥有远程管理域控制器的权限，您也可以从 DC 中导出 ActiveDirectory 模块，并且可以通过隐式远程操作在本地使用它。</p>
<p>以下是使用方法：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$DC</span> = <span class="string">'dc1'</span>  <span class="comment"># rename, must be name of one of your domain controllers</span></div><div class="line"></div><div class="line"><span class="comment"># create a session</span></div><div class="line"><span class="variable">$s</span> = <span class="built_in">New-PSSession</span> -ComputerName dc1</div><div class="line"><span class="comment"># export the ActiveDirectory module from the server to a local module "ADStuff"</span></div><div class="line"><span class="built_in">Export-PSSession</span> -Session <span class="variable">$s</span> -OutputModule ADStuff -Module ActiveDirectory -AllowClobber -Force</div><div class="line"></div><div class="line"><span class="comment"># remove session</span></div><div class="line"><span class="built_in">Remove-PSSession</span> <span class="variable">$s</span></div></pre></td></tr></table></figure>
<p>当您运行这段代码时，并且您拥有连接到 DC 的权限时，这段代码创建了一个名为 “ADStuff” 的本地 module，其中包含了所有 AD cmdlet。您可以通过隐式远程处理使用 AD cmdlet而不需要安装 RSAT 工具。</p>
<p>警告：由于所有 cmdlet 实际上都是运行在服务器端，所有结果都被序列化后传到本地。这会改变对象类型，所以当您用将对象通过管道从一个 AD cmdlet 传到另一个 AD cmdlet 时，您可能会遇到绑定问题。只要您在管道之外使用 cmdlet，那么一切都没问题。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/exporting-activedirectory-module" target="_blank" rel="external">Exporting ActiveDirectory Module</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Exporting ActiveDirectory Module
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 管理 NTFS 权限</title>
    <link href="http://blog.vichamp.com/2017/03/29/managing-ntfs-permissions1/"/>
    <id>http://blog.vichamp.com/2017/03/29/managing-ntfs-permissions1/</id>
    <published>2017-03-28T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.516Z</updated>
    
    <content type="html"><![CDATA[<p>由于没有内置的管理 NTFS 权限的 cmdlet，所以有越来越多的开源 PowerShell module 实现这个功能。一个有前途的 module 是由 Raimund Andree，一个德国的 Microsoft 工程师写的。他也将在即将到来的 PowerShell 欧洲会议 (<a href="http://www.psconf.eu" target="_blank" rel="external">www.psconf.eu</a>) 中演讲。</p>
<p>如果您使用的是 PowerShell 5 或已经安装了 PowerShellGet (<a href="http://www.powershellgallery.com" target="_blank" rel="external">www.powershellgallery.com</a>)，以下是从 PowerShell Gallery 下载并安装 “NTFSSecurity” module 的方法：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># review module details</span></div><div class="line">Find-Module -Repository PSGallery -Name NTFSSecurity | <span class="built_in">Select-Object</span> -Property * | <span class="built_in">Out-GridView</span></div><div class="line"></div><div class="line"><span class="comment"># download module</span></div><div class="line">Install-Module -Repository PSGallery -Name NTFSSecurity -Scope CurrentUser</div></pre></td></tr></table></figure>
<p>要查看所有的新 cmdlet，请试试这段代码：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; <span class="built_in">Get-Command</span> -Module NTFSSecurity</div><div class="line"></div><div class="line">CommandType     Name                                               Version</div><div class="line"></div><div class="line">-----------     ----                                               -------    </div><div class="line">Cmdlet          Add-NTFSAccess                                     <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Add-NTFSAudit                                      <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Clear-NTFSAccess                                   <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Clear-NTFSAudit                                    <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          <span class="built_in">Copy-Item</span>2                                         <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Disable-NTFSAccessInheritance                      <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Disable-NTFSAuditInheritance                       <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Disable-Privileges                                 <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Enable-NTFSAccessInheritance                       <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Enable-NTFSAuditInheritance                        <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Enable-Privileges                                  <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          <span class="built_in">Get-ChildItem</span>2                                     <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Get-DiskSpace                                      <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Get-FileHash2                                      <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          <span class="built_in">Get-Item</span>2                                          <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Get-NTFSAccess                                     <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Get-NTFSAudit                                      <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Get-NTFSEffectiveAccess                            <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Get-NTFSHardLink                                   <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Get-NTFSInheritance                                <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Get-NTFSOrphanedAccess                             <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Get-NTFSOrphanedAudit                              <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Get-NTFSOwner                                      <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Get-NTFSSecurityDescriptor                         <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Get-NTFSSimpleAccess                               <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Get-Privileges                                     <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          <span class="built_in">Move-Item</span>2                                         <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          New-NTFSHardLink                                   <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          New-NTFSSymbolicLink                               <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          <span class="built_in">Remove-Item</span>2                                       <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Remove-NTFSAccess                                  <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Remove-NTFSAudit                                   <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Set-NTFSInheritance                                <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Set-NTFSOwner                                      <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          Set-NTFSSecurityDescriptor                         <span class="number">4.2</span>.<span class="number">3</span></div><div class="line">Cmdlet          <span class="built_in">Test-Path</span>2                                         <span class="number">4.2</span>.<span class="number">3</span></div></pre></td></tr></table></figure>
<p>当您获取到这些 cmdlet，那么增加或设置 NTFS 权限就轻而易举：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$path</span> = <span class="string">'c:\test1'</span></div><div class="line"></div><div class="line">mkdir <span class="variable">$path</span></div><div class="line"></div><div class="line">Get-NTFSAccess -Path <span class="variable">$Path</span> | </div><div class="line">    Add-NTFSAccess -Account training14\student14 -AccessRights CreateFiles -AccessType Allow</div></pre></td></tr></table></figure>
<p>警告：您需要管理员权限才能更改 NTFS 权限，即使是操作您拥有的文件系统对象。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/managing-ntfs-permissions1" target="_blank" rel="external">Managing NTFS Permissions</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Managing NTFS Permissions
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 使用通配符确定数组是否包含值</title>
    <link href="http://blog.vichamp.com/2017/03/28/determine-if-array-contains-value-using-wildcards/"/>
    <id>http://blog.vichamp.com/2017/03/28/determine-if-array-contains-value-using-wildcards/</id>
    <published>2017-03-27T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.511Z</updated>
    
    <content type="html"><![CDATA[<p>当您想了解一个数组是否包含某个指定的元素，PowerShell 提供了 <code>-contains</code> 操作符。然而这个操作符不支持通配符，所以您只能使用精确匹配。</p>
<p>以下是一个帮助您使用通配符过滤数组元素的解决方法：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$a</span> = <span class="string">'Hanover'</span>, <span class="string">'Hamburg'</span>, <span class="string">'Vienna'</span>, <span class="string">'Zurich'</span></div><div class="line"></div><div class="line"><span class="comment"># is the exact phrase present in array?</span></div><div class="line"><span class="variable">$a</span> <span class="nomarkup">-contains</span> <span class="string">'Hannover'</span></div><div class="line"><span class="comment"># is ANY phrase present in array that matches the wildcard expression?</span></div><div class="line">(@(<span class="variable">$a</span>) <span class="nomarkup">-like</span> <span class="string">'Ha*'</span>).Count <span class="nomarkup">-gt</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment"># list all phrases from array that match the wildcard expressions</span></div><div class="line">@(<span class="variable">$a</span>) <span class="nomarkup">-like</span> <span class="string">'Ha*'</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/determine-if-array-contains-value-using-wildcards" target="_blank" rel="external">Determine if Array Contains Value – Using Wildcards</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Determine if Array Contains Value – Using Wildcards
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 处理 LDAP 和日期</title>
    <link href="http://blog.vichamp.com/2017/03/27/working-with-ldap-and-dates/"/>
    <id>http://blog.vichamp.com/2017/03/27/working-with-ldap-and-dates/</id>
    <published>2017-03-26T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.505Z</updated>
    
    <content type="html"><![CDATA[<p>LDAP 过滤器是一个快速和强大的从 Active Directory 中获取信息的方法。然而，LDAP 过滤器使用的是一个很底层的日期和时间格式。它基本上是一个很大的整形数。幸运的是 PowerShell 包含多种将实际 DateTime 对象转换为这些数字，以及相反操作的方法。</p>
<p>以下是一个使用 ActiveDirectory 模块中 <code>Get-ADUser</code> 方法来查找所有近期更改了密码的用户的示例代码。如果您没有这个 module，请从 Microsoft 下载免费的 RSAT 工具。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># find all AD Users who changed their password in the last 5 days</span></div><div class="line"><span class="variable">$date</span> = (<span class="built_in">Get-Date</span>).AddDays(-<span class="number">5</span>)</div><div class="line"><span class="variable">$ticks</span> = <span class="variable">$date</span>.ToFileTime()</div><div class="line"></div><div class="line"></div><div class="line"><span class="variable">$ldap</span> = <span class="string">"(&amp;(objectCategory=person)(objectClass=user)(pwdLastSet&gt;=<span class="variable">$ticks</span>))"</span></div><div class="line">Get-ADUser -LDAPFilter <span class="variable">$ldap</span> -Properties * |</div><div class="line">  <span class="built_in">Select-Object</span> -Property Name, PasswordLastSet</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/working-with-ldap-and-dates" target="_blank" rel="external">Working with LDAP and Dates</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Working with LDAP and Dates
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 使用 PowerShell 参数验证器</title>
    <link href="http://blog.vichamp.com/2017/03/24/using-a-powershell-parameter-validator/"/>
    <id>http://blog.vichamp.com/2017/03/24/using-a-powershell-parameter-validator/</id>
    <published>2017-03-23T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.498Z</updated>
    
    <content type="html"><![CDATA[<p>PowerShell 的函数参数支持 <code>ValidateScript</code> 属性，可以关联到一段 PowerShell 代码。当该参数接收到一个值时，该代码将会被调用，并且返回 <code>$true</code> 或 <code>$false</code>。如果该代码返回 <code>$false</code> 则该参数被拒绝。</p>
<p>以下是一个仅接受 Windows 文件夹中存在的文件的文件名的例子：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Get-File</div><div class="line">&#123;</div><div class="line">    <span class="keyword">param</span></div><div class="line">    (</div><div class="line">        [Parameter(Mandatory)]</div><div class="line">        [ValidateScript(&#123; <span class="built_in">Test-Path</span> -Path <span class="string">"<span class="variable">$env:windir</span>\<span class="variable">$_</span>"</span> &#125;)]</div><div class="line">        [string]</div><div class="line">        <span class="variable">$File</span></div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="string">"<span class="variable">$File</span> exists in your Windows folder."</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下是使用效果：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; Get-File  -File explorer.exe</div><div class="line">explorer.exe exists  <span class="keyword">in</span> your Windows folder.</div><div class="line"></div><div class="line">PS C:\&gt; Get-File  -File something.exe</div><div class="line">Get-File : Cannot validate argument on parameter  <span class="string">'File'</span>. The <span class="string">" Test-Path -Path "</span><span class="variable">$env:windir</span>\<span class="variable">$_</span><span class="string">" "</span> validation  script <span class="keyword">for</span> the argument with value <span class="string">"something.exe"</span> did not <span class="keyword">return</span> a  result of True. Determine why the validation script failed, and then <span class="keyword">try</span> the  command again.</div><div class="line">At line:<span class="number">1</span> char:<span class="number">16</span></div><div class="line">+ Get-File -File something.exe</div><div class="line">+                 ~~~~~~~~~~~~~</div><div class="line">    +  CategoryInfo          : InvalidData: (:)  [Get-File], ParameterBindingValidationException</div><div class="line">    +  FullyQualifiedErrorId : ParameterArgumentValidationError,Get-File</div><div class="line"></div><div class="line">PS C:\&gt; Get-File  -File memory.dmp</div><div class="line">memory.dmp exists <span class="keyword">in</span>  your Windows folder.</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/using-a-powershell-parameter-validator" target="_blank" rel="external">Using a PowerShell Parameter Validator</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Using a PowerShell Parameter Validator
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 按区域转换数据</title>
    <link href="http://blog.vichamp.com/2017/03/23/casting-data-with-culture/"/>
    <id>http://blog.vichamp.com/2017/03/23/casting-data-with-culture/</id>
    <published>2017-03-22T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.490Z</updated>
    
    <content type="html"><![CDATA[<p>当转换数据（将它转换为不同的数据类型）时，PowerShell 支持两种不同的方式方式。</p>
<p>以下是一个例子：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[DateTime]<span class="string">'12.1.2017'</span></div><div class="line"><span class="string">'12.1.2017'</span> -as [DateTime]</div></pre></td></tr></table></figure>
<p>两行代码都将一个字符串转为一个 DateTime 对象。第一行代码代表强制转换。它可能成功也有可能失败，并且它总是使用语言中性的格式（US 格式），所以它应为一个 月-日-年 格式。</p>
<p>第二行代表“尝试转换”：该转换要么成功要么静默地返回 <code>$null</code>。该转换遵循当前的区域设置，所以如果您在一个德文系统众运行这段代码，这段文字被解释成 日-月-年 格式。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/casting-data-with-culture" target="_blank" rel="external">Casting Data with Culture</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Casting Data with Culture
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 调用一个脚本块</title>
    <link href="http://blog.vichamp.com/2017/03/22/invoking-a-script-block/"/>
    <id>http://blog.vichamp.com/2017/03/22/invoking-a-script-block/</id>
    <published>2017-03-21T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.482Z</updated>
    
    <content type="html"><![CDATA[<p>可以通过调用操作符，例如 “<code>&amp;</code>“、”<code>.</code>“ 或调用 <code>Invoke()</code> 方法调用在一个脚本块中的代码。</p>
<p>一个区别是当有多于一个结果时的输出：调用操作符返回一个扁平的对象数组，而 <code>Invoke()</code> 返回一个集合：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$code</span> = &#123; <span class="built_in">Get-Process</span> &#125;</div><div class="line"></div><div class="line"><span class="variable">$result1</span> = &amp; <span class="variable">$code</span></div><div class="line"><span class="variable">$result2</span> = <span class="variable">$code</span>.Invoke()</div><div class="line"></div><div class="line"><span class="variable">$result1</span>.GetType().FullName</div><div class="line"><span class="variable">$result2</span>.GetType().FullName</div></pre></td></tr></table></figure>
<p>通过 <code>Invoke()</code> 方法返回的集合拥有额外的方法，例如 <code>RemoveAt()</code> 和 <code>Insert()</code>，它们能够帮您修改结果数据，能高效地插入或删除元素。</p>
<p>您可以手动将一个 cmdlet 的返回值手动转为一个 ArrayList：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$arrayList</span> = [Collections.ArrayList]@(<span class="built_in">Get-Process</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/invoking-a-script-block" target="_blank" rel="external">Invoking a Script Block</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Invoking a Script Block
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 不带动词运行 Cmdlet</title>
    <link href="http://blog.vichamp.com/2017/03/21/running-cmdlets-without-verb/"/>
    <id>http://blog.vichamp.com/2017/03/21/running-cmdlets-without-verb/</id>
    <published>2017-03-20T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.478Z</updated>
    
    <content type="html"><![CDATA[<p>这是从 PowerShell 1.0 开始就具有的一个特性：调用动词为 “get” 的 cmdlet 可以省略动词。所以调用 “<code>Get-Service</code>“ 时您可以仅执行 “<code>Service</code>“；调用 “<code>Get-Date</code>“ 时可以仅执行 “<code>Date</code>“。</p>
<p>以下不是别名，甚至 PowerShell 引擎并不知道为什么它能工作。请试试这些代码：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PS&gt; Date</div><div class="line">PS&gt; <span class="built_in">Get-Command</span> Date</div></pre></td></tr></table></figure>
<p>使用这个快捷方式的前提是没有冲突的命令或语法元素。这也是为什么您可以运行 “<code>Get-Process</code>“，但不能运行 “<code>Process</code>“ 的原因：”<code>Process</code>“ 是 PowerShell 语言中的一个保留关键字。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/running-cmdlets-without-verb" target="_blank" rel="external">Running Cmdlets without Verb</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Running Cmdlets without Verb
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 限制文本的长度（第二部分）</title>
    <link href="http://blog.vichamp.com/2017/03/20/texts-with-maximum-length-part-2/"/>
    <id>http://blog.vichamp.com/2017/03/20/texts-with-maximum-length-part-2/</id>
    <published>2017-03-19T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.474Z</updated>
    
    <content type="html"><![CDATA[<p>以下是确保一段文本不超过指定长度的另一种策略。和前一个技能不同的是，当文本长度小于最大长度时，这段代码不会补齐空格：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$text</span> = <span class="string">'this'</span></div><div class="line"><span class="variable">$MaxLength</span> = <span class="number">10</span></div><div class="line"><span class="variable">$CutOff</span> = [Math]::Min(<span class="variable">$MaxLength</span>, <span class="variable">$text</span>.Length)</div><div class="line"><span class="variable">$text</span>.Substring(<span class="number">0</span>,<span class="variable">$CutOff</span>)</div></pre></td></tr></table></figure>
<p>关键点在 <code>Min()</code> 函数，它决定了两个值中小的哪个。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/texts-with-maximum-length-part-2" target="_blank" rel="external">Texts with Maximum Length (Part 2)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Texts with Maximum Length (Part 2)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 限制文本的长度（第一部分）</title>
    <link href="http://blog.vichamp.com/2017/03/17/texts-with-maximum-length-part-1/"/>
    <id>http://blog.vichamp.com/2017/03/17/texts-with-maximum-length-part-1/</id>
    <published>2017-03-16T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.470Z</updated>
    
    <content type="html"><![CDATA[<p>如果您想将一个文本的长度限制在某一个长度，以下是一个简单的方法：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$text</span> = <span class="string">'this is a long text'</span></div><div class="line"><span class="variable">$MaxLength</span> = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="variable">$text</span>.PadRight(<span class="variable">$MaxLength</span>).Substring(<span class="number">0</span>,<span class="variable">$MaxLength</span>)</div></pre></td></tr></table></figure>
<p>这段代码首先对文本填充，以防它比最大长度还短，然后使用 <code>Substring()</code> 裁剪掉多余的文本。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/texts-with-maximum-length-part-1" target="_blank" rel="external">Texts with Maximum Length (Part 1)</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Texts with Maximum Length (Part 1)
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 查找所有含桌面的配置文件</title>
    <link href="http://blog.vichamp.com/2017/03/16/finding-all-profiles-with-desktop/"/>
    <id>http://blog.vichamp.com/2017/03/16/finding-all-profiles-with-desktop/</id>
    <published>2017-03-15T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.470Z</updated>
    
    <content type="html"><![CDATA[<p>这一行代码能够列出所有本地用户配置文件中的桌面——请确保以管理员身份运行这行代码才能查看其他人的配置文件：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Resolve-Path</span> -Path C:\users\*\Desktop -ErrorAction SilentlyContinue</div></pre></td></tr></table></figure>
<p>如果您只想获得配置文件中包含 “Desktop” 文件夹的用户名，请用以下代码：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Resolve-Path</span> -Path C:\users\*\Desktop -ErrorAction SilentlyContinue |</div><div class="line">    <span class="built_in">ForEach-Object</span> &#123; </div><div class="line">        <span class="variable">$_</span>.Path.Split(<span class="string">'\'</span>)[-<span class="number">2</span>]</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这段代码获取路径并用反斜杠将它们分割，创建一个路径元素的数组。下标 -2 是指倒数第二个元素，即用户名。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/finding-all-profiles-with-desktop" target="_blank" rel="external">Finding All Profiles with Desktop</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Finding All Profiles with Desktop
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - Where-Object 和 .Where()</title>
    <link href="http://blog.vichamp.com/2017/03/15/where-object-and-where/"/>
    <id>http://blog.vichamp.com/2017/03/15/where-object-and-where/</id>
    <published>2017-03-14T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.462Z</updated>
    
    <content type="html"><![CDATA[<p>从 PowerShell 4 开始，当您不想使用管道的时候，可以使用 <code>Where()</code> 和 <code>ForEach()</code> 方法来代替 <code>Where-Object</code> 和 <code>ForEach-Object</code>。</p>
<p>所以如果您已经将所有数据加载到一个变量中，那么非流式操作会更高效：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$Services</span> = <span class="built_in">Get-Service</span></div><div class="line"></div><div class="line"><span class="comment"># streaming</span></div><div class="line"><span class="variable">$Services</span> | <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.Status <span class="nomarkup">-eq</span> <span class="string">'Running'</span> &#125;</div><div class="line"><span class="comment"># non-streaming</span></div><div class="line"><span class="variable">$Services</span>.Where&#123; <span class="variable">$_</span>.Status <span class="nomarkup">-eq</span> <span class="string">'Running'</span> &#125;</div></pre></td></tr></table></figure>
<p>要节约资源，最有效地方法仍然是使用流式管道，而不是用变量：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Get-Service</span> | <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.Status <span class="nomarkup">-eq</span> <span class="string">'Running'</span> &#125;</div></pre></td></tr></table></figure>
<p>请注意 <code>Where-Object</code> 和 <code>.Where()</code> 使用不同的数组类型，所以它们的输出技术上是不同的：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; (<span class="number">1</span>..<span class="number">19</span> |  <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span> <span class="nomarkup">-gt</span> <span class="number">10</span> &#125;).GetType().FullName</div><div class="line">System.Object[]</div><div class="line"></div><div class="line">PS C:\&gt;  ((<span class="number">1</span>..<span class="number">19</span>).Where&#123; <span class="variable">$_</span> <span class="nomarkup">-gt</span> <span class="number">10</span> &#125;).GetType().FullName</div><div class="line">System.Collections.ObjectModel.Collection`1[[System.Management.Automation.PSObject, System.Management.Automation, Version=<span class="number">3.0</span>.<span class="number">0.0</span>, Culture=neutral,  PublicKeyToken=<span class="number">31</span>bf3856ad364e35]]</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/where-object-and-where" target="_blank" rel="external">Where-Object and .Where()</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Where-Object and .Where()
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 快速创建对象数组</title>
    <link href="http://blog.vichamp.com/2017/03/14/creating-object-arrays-on-the-fly/"/>
    <id>http://blog.vichamp.com/2017/03/14/creating-object-arrays-on-the-fly/</id>
    <published>2017-03-13T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.458Z</updated>
    
    <content type="html"><![CDATA[<p>以下是一个用内置的 CSV 处理器生成对象数组的代码实例：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$csv</span> = <span class="string">@'</span></div><div class="line">PC,Date</div><div class="line">PC82012,2017-02-28</div><div class="line">PC82038,2017-02-28</div><div class="line">PC83073,2017-02-28</div><div class="line">PC84004,2017-02-28</div><div class="line">PC84009,2017-02-28</div><div class="line">PC84015,2017-02-28</div><div class="line">PC90435,2017-02-28</div><div class="line">'@</div><div class="line"></div><div class="line"><span class="variable">$data</span> = <span class="variable">$csv</span> | <span class="built_in">ConvertFrom-Csv</span></div><div class="line"></div><div class="line"><span class="variable">$data</span></div><div class="line"><span class="variable">$data</span> | <span class="built_in">Out-GridView</span></div></pre></td></tr></table></figure>
<p>如果一个脚本需要一个静态的服务器、连接数据或其他信息的列表，这种方式会很有用。</p>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/creating-object-arrays-on-the-fly" target="_blank" rel="external">Creating Object Arrays on the Fly</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Creating Object Arrays on the Fly
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell 技能连载 - 探索类型加速器</title>
    <link href="http://blog.vichamp.com/2017/03/13/exploring-type-accelerators/"/>
    <id>http://blog.vichamp.com/2017/03/13/exploring-type-accelerators/</id>
    <published>2017-03-12T16:00:00.000Z</published>
    <updated>2017-04-10T02:23:56.454Z</updated>
    
    <content type="html"><![CDATA[<p>PowerShell 使用了大量所谓类型加速器来简化过长的 .NET 类型名。例如 “System.DirectoryServices.DirectoryEntry” 可以简化为 “ADSI”。</p>
<p>当您需要查询一个类型的完整名称时，您可以获取到实际的完整 .NET 类型名：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; [ADSI].FullName</div><div class="line">System.DirectoryServices.DirectoryEntry</div><div class="line"></div><div class="line">PS C:\&gt;</div></pre></td></tr></table></figure>
<p>以下代码在 PowerShell 中输出所有的内置 .NET 类型加速器：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[PSObject].Assembly.GetType(<span class="string">"System.Management.Automation.TypeAccelerators"</span>)::get |</div><div class="line">    <span class="built_in">Out-GridView</span></div></pre></td></tr></table></figure>
<p>除了显式的类型加速器之外，还有一个 PowerShell 内置的规则：在 <code>System</code> 命名空间中的类型加速器可以省略命名空间。所以以下的表达完全一致：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; [int].FullName</div><div class="line">System.Int32</div><div class="line"></div><div class="line">PS C:\&gt; [System.Int32].FullName</div><div class="line">System.Int32</div><div class="line"></div><div class="line">PS C:\&gt; [Int32].FullName</div><div class="line">System.Int32</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>本文国际来源：<a href="http://community.idera.com/powershell/powertips/b/tips/posts/exploring-type-accelerators" target="_blank" rel="external">Exploring Type Accelerators</a></p>]]></content>
    
    <summary type="html">
    
      PowerTip of the Day - Exploring Type Accelerators
    
    </summary>
    
      <category term="powershell" scheme="http://blog.vichamp.com/categories/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/categories/powershell/tip/"/>
    
    
      <category term="powershell" scheme="http://blog.vichamp.com/tags/powershell/"/>
    
      <category term="tip" scheme="http://blog.vichamp.com/tags/tip/"/>
    
      <category term="powertip" scheme="http://blog.vichamp.com/tags/powertip/"/>
    
      <category term="series" scheme="http://blog.vichamp.com/tags/series/"/>
    
      <category term="translation" scheme="http://blog.vichamp.com/tags/translation/"/>
    
  </entry>
  
</feed>
